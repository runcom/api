// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/openshift/api/machineconfiguration/v1/generated.proto

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		github.com/openshift/api/machineconfiguration/v1/generated.proto

	It has these top-level messages:
		ContainerRuntimeConfig
		ContainerRuntimeConfigCondition
		ContainerRuntimeConfigList
		ContainerRuntimeConfigSpec
		ContainerRuntimeConfigStatus
		ContainerRuntimeConfiguration
		ControllerConfig
		ControllerConfigList
		ControllerConfigSpec
		ControllerConfigStatus
		ControllerConfigStatusCondition
		KubeletConfig
		KubeletConfigCondition
		KubeletConfigList
		KubeletConfigSpec
		KubeletConfigStatus
		MCOConfig
		MCOConfigList
		MCOConfigSpec
		MachineConfigPool
		MachineConfigPoolCondition
		MachineConfigPoolList
		MachineConfigPoolSpec
		MachineConfigPoolStatus
		MachineConfigPoolStatusConfiguration
		KubeletAnonymousAuthentication
		KubeletAuthentication
		KubeletAuthorization
		KubeletConfiguration
		KubeletWebhookAuthentication
		KubeletWebhookAuthorization
		KubeletX509Authentication
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import k8s_io_api_core_v1 "k8s.io/api/core/v1"

import k8s_io_apimachinery_pkg_apis_meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

import k8s_io_apimachinery_pkg_util_intstr "k8s.io/apimachinery/pkg/util/intstr"
import k8s_io_kubelet_config_v1beta1 "k8s.io/kubelet/config/v1beta1"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *ContainerRuntimeConfig) Reset()                    { *m = ContainerRuntimeConfig{} }
func (*ContainerRuntimeConfig) ProtoMessage()               {}
func (*ContainerRuntimeConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *ContainerRuntimeConfigCondition) Reset()      { *m = ContainerRuntimeConfigCondition{} }
func (*ContainerRuntimeConfigCondition) ProtoMessage() {}
func (*ContainerRuntimeConfigCondition) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{1}
}

func (m *ContainerRuntimeConfigList) Reset()      { *m = ContainerRuntimeConfigList{} }
func (*ContainerRuntimeConfigList) ProtoMessage() {}
func (*ContainerRuntimeConfigList) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{2}
}

func (m *ContainerRuntimeConfigSpec) Reset()      { *m = ContainerRuntimeConfigSpec{} }
func (*ContainerRuntimeConfigSpec) ProtoMessage() {}
func (*ContainerRuntimeConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{3}
}

func (m *ContainerRuntimeConfigStatus) Reset()      { *m = ContainerRuntimeConfigStatus{} }
func (*ContainerRuntimeConfigStatus) ProtoMessage() {}
func (*ContainerRuntimeConfigStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{4}
}

func (m *ContainerRuntimeConfiguration) Reset()      { *m = ContainerRuntimeConfiguration{} }
func (*ContainerRuntimeConfiguration) ProtoMessage() {}
func (*ContainerRuntimeConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{5}
}

func (m *ControllerConfig) Reset()                    { *m = ControllerConfig{} }
func (*ControllerConfig) ProtoMessage()               {}
func (*ControllerConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{6} }

func (m *ControllerConfigList) Reset()                    { *m = ControllerConfigList{} }
func (*ControllerConfigList) ProtoMessage()               {}
func (*ControllerConfigList) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{7} }

func (m *ControllerConfigSpec) Reset()                    { *m = ControllerConfigSpec{} }
func (*ControllerConfigSpec) ProtoMessage()               {}
func (*ControllerConfigSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{8} }

func (m *ControllerConfigStatus) Reset()                    { *m = ControllerConfigStatus{} }
func (*ControllerConfigStatus) ProtoMessage()               {}
func (*ControllerConfigStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{9} }

func (m *ControllerConfigStatusCondition) Reset()      { *m = ControllerConfigStatusCondition{} }
func (*ControllerConfigStatusCondition) ProtoMessage() {}
func (*ControllerConfigStatusCondition) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{10}
}

func (m *KubeletConfig) Reset()                    { *m = KubeletConfig{} }
func (*KubeletConfig) ProtoMessage()               {}
func (*KubeletConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{11} }

func (m *KubeletConfigCondition) Reset()                    { *m = KubeletConfigCondition{} }
func (*KubeletConfigCondition) ProtoMessage()               {}
func (*KubeletConfigCondition) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{12} }

func (m *KubeletConfigList) Reset()                    { *m = KubeletConfigList{} }
func (*KubeletConfigList) ProtoMessage()               {}
func (*KubeletConfigList) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{13} }

func (m *KubeletConfigSpec) Reset()                    { *m = KubeletConfigSpec{} }
func (*KubeletConfigSpec) ProtoMessage()               {}
func (*KubeletConfigSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{14} }

func (m *KubeletConfigStatus) Reset()                    { *m = KubeletConfigStatus{} }
func (*KubeletConfigStatus) ProtoMessage()               {}
func (*KubeletConfigStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{15} }

func (m *MCOConfig) Reset()                    { *m = MCOConfig{} }
func (*MCOConfig) ProtoMessage()               {}
func (*MCOConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{16} }

func (m *MCOConfigList) Reset()                    { *m = MCOConfigList{} }
func (*MCOConfigList) ProtoMessage()               {}
func (*MCOConfigList) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{17} }

func (m *MCOConfigSpec) Reset()                    { *m = MCOConfigSpec{} }
func (*MCOConfigSpec) ProtoMessage()               {}
func (*MCOConfigSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{18} }

func (m *MachineConfigPool) Reset()                    { *m = MachineConfigPool{} }
func (*MachineConfigPool) ProtoMessage()               {}
func (*MachineConfigPool) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{19} }

func (m *MachineConfigPoolCondition) Reset()      { *m = MachineConfigPoolCondition{} }
func (*MachineConfigPoolCondition) ProtoMessage() {}
func (*MachineConfigPoolCondition) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{20}
}

func (m *MachineConfigPoolList) Reset()                    { *m = MachineConfigPoolList{} }
func (*MachineConfigPoolList) ProtoMessage()               {}
func (*MachineConfigPoolList) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{21} }

func (m *MachineConfigPoolSpec) Reset()                    { *m = MachineConfigPoolSpec{} }
func (*MachineConfigPoolSpec) ProtoMessage()               {}
func (*MachineConfigPoolSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{22} }

func (m *MachineConfigPoolStatus) Reset()      { *m = MachineConfigPoolStatus{} }
func (*MachineConfigPoolStatus) ProtoMessage() {}
func (*MachineConfigPoolStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{23}
}

func (m *MachineConfigPoolStatusConfiguration) Reset()      { *m = MachineConfigPoolStatusConfiguration{} }
func (*MachineConfigPoolStatusConfiguration) ProtoMessage() {}
func (*MachineConfigPoolStatusConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{24}
}

func (m *KubeletAnonymousAuthentication) Reset()      { *m = KubeletAnonymousAuthentication{} }
func (*KubeletAnonymousAuthentication) ProtoMessage() {}
func (*KubeletAnonymousAuthentication) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{25}
}

func (m *KubeletAuthentication) Reset()                    { *m = KubeletAuthentication{} }
func (*KubeletAuthentication) ProtoMessage()               {}
func (*KubeletAuthentication) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{26} }

func (m *KubeletAuthorization) Reset()                    { *m = KubeletAuthorization{} }
func (*KubeletAuthorization) ProtoMessage()               {}
func (*KubeletAuthorization) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{27} }

func (m *KubeletConfiguration) Reset()                    { *m = KubeletConfiguration{} }
func (*KubeletConfiguration) ProtoMessage()               {}
func (*KubeletConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{28} }

func (m *KubeletWebhookAuthentication) Reset()      { *m = KubeletWebhookAuthentication{} }
func (*KubeletWebhookAuthentication) ProtoMessage() {}
func (*KubeletWebhookAuthentication) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{29}
}

func (m *KubeletWebhookAuthorization) Reset()      { *m = KubeletWebhookAuthorization{} }
func (*KubeletWebhookAuthorization) ProtoMessage() {}
func (*KubeletWebhookAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{30}
}

func (m *KubeletX509Authentication) Reset()      { *m = KubeletX509Authentication{} }
func (*KubeletX509Authentication) ProtoMessage() {}
func (*KubeletX509Authentication) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{31}
}

func init() {
	proto.RegisterType((*ContainerRuntimeConfig)(nil), "github.com.openshift.api.machineconfiguration.v1.ContainerRuntimeConfig")
	proto.RegisterType((*ContainerRuntimeConfigCondition)(nil), "github.com.openshift.api.machineconfiguration.v1.ContainerRuntimeConfigCondition")
	proto.RegisterType((*ContainerRuntimeConfigList)(nil), "github.com.openshift.api.machineconfiguration.v1.ContainerRuntimeConfigList")
	proto.RegisterType((*ContainerRuntimeConfigSpec)(nil), "github.com.openshift.api.machineconfiguration.v1.ContainerRuntimeConfigSpec")
	proto.RegisterType((*ContainerRuntimeConfigStatus)(nil), "github.com.openshift.api.machineconfiguration.v1.ContainerRuntimeConfigStatus")
	proto.RegisterType((*ContainerRuntimeConfiguration)(nil), "github.com.openshift.api.machineconfiguration.v1.ContainerRuntimeConfiguration")
	proto.RegisterType((*ControllerConfig)(nil), "github.com.openshift.api.machineconfiguration.v1.ControllerConfig")
	proto.RegisterType((*ControllerConfigList)(nil), "github.com.openshift.api.machineconfiguration.v1.ControllerConfigList")
	proto.RegisterType((*ControllerConfigSpec)(nil), "github.com.openshift.api.machineconfiguration.v1.ControllerConfigSpec")
	proto.RegisterType((*ControllerConfigStatus)(nil), "github.com.openshift.api.machineconfiguration.v1.ControllerConfigStatus")
	proto.RegisterType((*ControllerConfigStatusCondition)(nil), "github.com.openshift.api.machineconfiguration.v1.ControllerConfigStatusCondition")
	proto.RegisterType((*KubeletConfig)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletConfig")
	proto.RegisterType((*KubeletConfigCondition)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletConfigCondition")
	proto.RegisterType((*KubeletConfigList)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletConfigList")
	proto.RegisterType((*KubeletConfigSpec)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletConfigSpec")
	proto.RegisterType((*KubeletConfigStatus)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletConfigStatus")
	proto.RegisterType((*MCOConfig)(nil), "github.com.openshift.api.machineconfiguration.v1.MCOConfig")
	proto.RegisterType((*MCOConfigList)(nil), "github.com.openshift.api.machineconfiguration.v1.MCOConfigList")
	proto.RegisterType((*MCOConfigSpec)(nil), "github.com.openshift.api.machineconfiguration.v1.MCOConfigSpec")
	proto.RegisterType((*MachineConfigPool)(nil), "github.com.openshift.api.machineconfiguration.v1.MachineConfigPool")
	proto.RegisterType((*MachineConfigPoolCondition)(nil), "github.com.openshift.api.machineconfiguration.v1.MachineConfigPoolCondition")
	proto.RegisterType((*MachineConfigPoolList)(nil), "github.com.openshift.api.machineconfiguration.v1.MachineConfigPoolList")
	proto.RegisterType((*MachineConfigPoolSpec)(nil), "github.com.openshift.api.machineconfiguration.v1.MachineConfigPoolSpec")
	proto.RegisterType((*MachineConfigPoolStatus)(nil), "github.com.openshift.api.machineconfiguration.v1.MachineConfigPoolStatus")
	proto.RegisterType((*MachineConfigPoolStatusConfiguration)(nil), "github.com.openshift.api.machineconfiguration.v1.MachineConfigPoolStatusConfiguration")
	proto.RegisterType((*KubeletAnonymousAuthentication)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletAnonymousAuthentication")
	proto.RegisterType((*KubeletAuthentication)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletAuthentication")
	proto.RegisterType((*KubeletAuthorization)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletAuthorization")
	proto.RegisterType((*KubeletConfiguration)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletConfiguration")
	proto.RegisterType((*KubeletWebhookAuthentication)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletWebhookAuthentication")
	proto.RegisterType((*KubeletWebhookAuthorization)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletWebhookAuthorization")
	proto.RegisterType((*KubeletX509Authentication)(nil), "github.com.openshift.api.machineconfiguration.v1.KubeletX509Authentication")
}
func (m *ContainerRuntimeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n1, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n2, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n3, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *ContainerRuntimeConfigCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeConfigCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i += copy(dAtA[i:], m.Status)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastTransitionTime.Size()))
	n4, err := m.LastTransitionTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i += copy(dAtA[i:], m.Reason)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	return i, nil
}

func (m *ContainerRuntimeConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeConfigList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ListMeta.Size()))
	n5, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ContainerRuntimeConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MachineConfigPoolSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.MachineConfigPoolSelector.Size()))
		n6, err := m.MachineConfigPoolSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ContainerRuntimeConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.ContainerRuntimeConfig.Size()))
		n7, err := m.ContainerRuntimeConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ContainerRuntimeConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ContainerRuntimeConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.PidsLimit))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LogLevel)))
	i += copy(dAtA[i:], m.LogLevel)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LogSizeMax.Size()))
	n8, err := m.LogSizeMax.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.OverlaySize.Size()))
	n9, err := m.OverlaySize.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *ControllerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n10, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n11, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n12, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *ControllerConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerConfigList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ListMeta.Size()))
	n13, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ControllerConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterDNSIP)))
	i += copy(dAtA[i:], m.ClusterDNSIP)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloudProviderConfig)))
	i += copy(dAtA[i:], m.CloudProviderConfig)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Platform)))
	i += copy(dAtA[i:], m.Platform)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EtcdDiscoveryDomain)))
	i += copy(dAtA[i:], m.EtcdDiscoveryDomain)
	if m.EtcdCAData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.EtcdCAData)))
		i += copy(dAtA[i:], m.EtcdCAData)
	}
	if m.EtcdMetricCAData != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.EtcdMetricCAData)))
		i += copy(dAtA[i:], m.EtcdMetricCAData)
	}
	if m.RootCAData != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.RootCAData)))
		i += copy(dAtA[i:], m.RootCAData)
	}
	if m.PullSecret != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.PullSecret.Size()))
		n14, err := m.PullSecret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Images) > 0 {
		keysForImages := make([]string, 0, len(m.Images))
		for k := range m.Images {
			keysForImages = append(keysForImages, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForImages)
		for _, k := range keysForImages {
			dAtA[i] = 0x4a
			i++
			v := m.Images[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OSImageURL)))
	i += copy(dAtA[i:], m.OSImageURL)
	return i, nil
}

func (m *ControllerConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ControllerConfigStatusCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerConfigStatusCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i += copy(dAtA[i:], m.Status)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastTransitionTime.Size()))
	n15, err := m.LastTransitionTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i += copy(dAtA[i:], m.Reason)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	return i, nil
}

func (m *KubeletConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n16, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n17, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n18, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *KubeletConfigCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletConfigCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i += copy(dAtA[i:], m.Status)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastTransitionTime.Size()))
	n19, err := m.LastTransitionTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i += copy(dAtA[i:], m.Reason)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	return i, nil
}

func (m *KubeletConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletConfigList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ListMeta.Size()))
	n20, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KubeletConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MachineConfigPoolSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.MachineConfigPoolSelector.Size()))
		n21, err := m.MachineConfigPoolSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.KubeletConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.KubeletConfig.Size()))
		n22, err := m.KubeletConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *KubeletConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MCOConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MCOConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n23, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n24, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	return i, nil
}

func (m *MCOConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MCOConfigList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ListMeta.Size()))
	n25, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MCOConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MCOConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MachineConfigPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineConfigPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n26, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n27, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n28, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	return i, nil
}

func (m *MachineConfigPoolCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineConfigPoolCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i += copy(dAtA[i:], m.Status)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastTransitionTime.Size()))
	n29, err := m.LastTransitionTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i += copy(dAtA[i:], m.Reason)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	return i, nil
}

func (m *MachineConfigPoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineConfigPoolList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ListMeta.Size()))
	n30, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MachineConfigPoolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineConfigPoolSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MachineConfigSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.MachineConfigSelector.Size()))
		n31, err := m.MachineConfigSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.NodeSelector != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.NodeSelector.Size()))
		n32, err := m.NodeSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	dAtA[i] = 0x18
	i++
	if m.Paused {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.MaxUnavailable != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.MaxUnavailable.Size()))
		n33, err := m.MaxUnavailable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *MachineConfigPoolStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineConfigPoolStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Configuration.Size()))
	n34, err := m.Configuration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	dAtA[i] = 0x18
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MachineCount))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.UpdatedMachineCount))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReadyMachineCount))
	dAtA[i] = 0x30
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.UnavailableMachineCount))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.DegradedMachineCount))
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0x42
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MachineConfigPoolStatusConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineConfigPoolStatusConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectReference.Size()))
	n35, err := m.ObjectReference.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	if len(m.Source) > 0 {
		for _, msg := range m.Source {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KubeletAnonymousAuthentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletAnonymousAuthentication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		dAtA[i] = 0x8
		i++
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KubeletAuthentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletAuthentication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.X509.Size()))
	n36, err := m.X509.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Webhook.Size()))
	n37, err := m.Webhook.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Anonymous.Size()))
	n38, err := m.Anonymous.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	return i, nil
}

func (m *KubeletAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletAuthorization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mode)))
	i += copy(dAtA[i:], m.Mode)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Webhook.Size()))
	n39, err := m.Webhook.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	return i, nil
}

func (m *KubeletConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StaticPodPath)))
	i += copy(dAtA[i:], m.StaticPodPath)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.SyncFrequency.Size()))
	n40, err := m.SyncFrequency.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n40
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.FileCheckFrequency.Size()))
	n41, err := m.FileCheckFrequency.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.HTTPCheckFrequency.Size()))
	n42, err := m.HTTPCheckFrequency.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StaticPodURL)))
	i += copy(dAtA[i:], m.StaticPodURL)
	if len(m.StaticPodURLHeader) > 0 {
		keysForStaticPodURLHeader := make([]string, 0, len(m.StaticPodURLHeader))
		for k := range m.StaticPodURLHeader {
			keysForStaticPodURLHeader = append(keysForStaticPodURLHeader, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForStaticPodURLHeader)
		for _, k := range keysForStaticPodURLHeader {
			dAtA[i] = 0x32
			i++
			v := m.StaticPodURLHeader[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x40
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	dAtA[i] = 0x48
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReadOnlyPort))
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSCertFile)))
	i += copy(dAtA[i:], m.TLSCertFile)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSPrivateKeyFile)))
	i += copy(dAtA[i:], m.TLSPrivateKeyFile)
	if len(m.TLSCipherSuites) > 0 {
		for _, s := range m.TLSCipherSuites {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSMinVersion)))
	i += copy(dAtA[i:], m.TLSMinVersion)
	dAtA[i] = 0x70
	i++
	if m.RotateCertificates {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x78
	i++
	if m.ServerTLSBootstrap {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Authentication.Size()))
	n43, err := m.Authentication.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Authorization.Size()))
	n44, err := m.Authorization.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n44
	if m.RegistryPullQPS != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.RegistryPullQPS))
	}
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.RegistryBurst))
	if m.EventRecordQPS != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.EventRecordQPS))
	}
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.EventBurst))
	if m.EnableDebuggingHandlers != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if *m.EnableDebuggingHandlers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	if m.EnableContentionProfiling {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.HealthzPort != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.HealthzPort))
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.HealthzBindAddress)))
	i += copy(dAtA[i:], m.HealthzBindAddress)
	if m.OOMScoreAdj != nil {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.OOMScoreAdj))
	}
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterDomain)))
	i += copy(dAtA[i:], m.ClusterDomain)
	if len(m.ClusterDNS) > 0 {
		for _, s := range m.ClusterDNS {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.StreamingConnectionIdleTimeout.Size()))
	n45, err := m.StreamingConnectionIdleTimeout.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.NodeStatusUpdateFrequency.Size()))
	n46, err := m.NodeStatusUpdateFrequency.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n46
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.NodeStatusReportFrequency.Size()))
	n47, err := m.NodeStatusReportFrequency.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n47
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.NodeLeaseDurationSeconds))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ImageMinimumGCAge.Size()))
	n48, err := m.ImageMinimumGCAge.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n48
	if m.ImageGCHighThresholdPercent != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ImageGCHighThresholdPercent))
	}
	if m.ImageGCLowThresholdPercent != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ImageGCLowThresholdPercent))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.VolumeStatsAggPeriod.Size()))
	n49, err := m.VolumeStatsAggPeriod.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeletCgroups)))
	i += copy(dAtA[i:], m.KubeletCgroups)
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SystemCgroups)))
	i += copy(dAtA[i:], m.SystemCgroups)
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CgroupRoot)))
	i += copy(dAtA[i:], m.CgroupRoot)
	if m.CgroupsPerQOS != nil {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		if *m.CgroupsPerQOS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CgroupDriver)))
	i += copy(dAtA[i:], m.CgroupDriver)
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CPUManagerPolicy)))
	i += copy(dAtA[i:], m.CPUManagerPolicy)
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CPUManagerReconcilePeriod.Size()))
	n50, err := m.CPUManagerReconcilePeriod.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	if len(m.QOSReserved) > 0 {
		keysForQOSReserved := make([]string, 0, len(m.QOSReserved))
		for k := range m.QOSReserved {
			keysForQOSReserved = append(keysForQOSReserved, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForQOSReserved)
		for _, k := range keysForQOSReserved {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x2
			i++
			v := m.QOSReserved[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.RuntimeRequestTimeout.Size()))
	n51, err := m.RuntimeRequestTimeout.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.HairpinMode)))
	i += copy(dAtA[i:], m.HairpinMode)
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxPods))
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PodCIDR)))
	i += copy(dAtA[i:], m.PodCIDR)
	if m.PodPidsLimit != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.PodPidsLimit))
	}
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResolverConfig)))
	i += copy(dAtA[i:], m.ResolverConfig)
	if m.CPUCFSQuota != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		if *m.CPUCFSQuota {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CPUCFSQuotaPeriod != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.CPUCFSQuotaPeriod.Size()))
		n52, err := m.CPUCFSQuotaPeriod.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxOpenFiles))
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContentType)))
	i += copy(dAtA[i:], m.ContentType)
	if m.KubeAPIQPS != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.KubeAPIQPS))
	}
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.KubeAPIBurst))
	if m.SerializeImagePulls != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x3
		i++
		if *m.SerializeImagePulls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.EvictionHard) > 0 {
		keysForEvictionHard := make([]string, 0, len(m.EvictionHard))
		for k := range m.EvictionHard {
			keysForEvictionHard = append(keysForEvictionHard, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionHard)
		for _, k := range keysForEvictionHard {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x3
			i++
			v := m.EvictionHard[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.EvictionSoft) > 0 {
		keysForEvictionSoft := make([]string, 0, len(m.EvictionSoft))
		for k := range m.EvictionSoft {
			keysForEvictionSoft = append(keysForEvictionSoft, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionSoft)
		for _, k := range keysForEvictionSoft {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x3
			i++
			v := m.EvictionSoft[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.EvictionSoftGracePeriod) > 0 {
		keysForEvictionSoftGracePeriod := make([]string, 0, len(m.EvictionSoftGracePeriod))
		for k := range m.EvictionSoftGracePeriod {
			keysForEvictionSoftGracePeriod = append(keysForEvictionSoftGracePeriod, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionSoftGracePeriod)
		for _, k := range keysForEvictionSoftGracePeriod {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x3
			i++
			v := m.EvictionSoftGracePeriod[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.EvictionPressureTransitionPeriod.Size()))
	n53, err := m.EvictionPressureTransitionPeriod.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.EvictionMaxPodGracePeriod))
	if len(m.EvictionMinimumReclaim) > 0 {
		keysForEvictionMinimumReclaim := make([]string, 0, len(m.EvictionMinimumReclaim))
		for k := range m.EvictionMinimumReclaim {
			keysForEvictionMinimumReclaim = append(keysForEvictionMinimumReclaim, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionMinimumReclaim)
		for _, k := range keysForEvictionMinimumReclaim {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x3
			i++
			v := m.EvictionMinimumReclaim[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.PodsPerCore))
	if m.EnableControllerAttachDetach != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x4
		i++
		if *m.EnableControllerAttachDetach {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x4
	i++
	if m.ProtectKernelDefaults {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.MakeIPTablesUtilChains != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x4
		i++
		if *m.MakeIPTablesUtilChains {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IPTablesMasqueradeBit != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.IPTablesMasqueradeBit))
	}
	if m.IPTablesDropBit != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.IPTablesDropBit))
	}
	if len(m.FeatureGates) > 0 {
		keysForFeatureGates := make([]string, 0, len(m.FeatureGates))
		for k := range m.FeatureGates {
			keysForFeatureGates = append(keysForFeatureGates, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForFeatureGates)
		for _, k := range keysForFeatureGates {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x4
			i++
			v := m.FeatureGates[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + 1
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.FailSwapOn != nil {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x4
		i++
		if *m.FailSwapOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContainerLogMaxSize)))
	i += copy(dAtA[i:], m.ContainerLogMaxSize)
	if m.ContainerLogMaxFiles != nil {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ContainerLogMaxFiles))
	}
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConfigMapAndSecretChangeDetectionStrategy)))
	i += copy(dAtA[i:], m.ConfigMapAndSecretChangeDetectionStrategy)
	if len(m.SystemReserved) > 0 {
		keysForSystemReserved := make([]string, 0, len(m.SystemReserved))
		for k := range m.SystemReserved {
			keysForSystemReserved = append(keysForSystemReserved, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSystemReserved)
		for _, k := range keysForSystemReserved {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x4
			i++
			v := m.SystemReserved[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.KubeReserved) > 0 {
		keysForKubeReserved := make([]string, 0, len(m.KubeReserved))
		for k := range m.KubeReserved {
			keysForKubeReserved = append(keysForKubeReserved, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForKubeReserved)
		for _, k := range keysForKubeReserved {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x4
			i++
			v := m.KubeReserved[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SystemReservedCgroup)))
	i += copy(dAtA[i:], m.SystemReservedCgroup)
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeReservedCgroup)))
	i += copy(dAtA[i:], m.KubeReservedCgroup)
	if len(m.EnforceNodeAllocatable) > 0 {
		for _, s := range m.EnforceNodeAllocatable {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x4
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *KubeletWebhookAuthentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletWebhookAuthentication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		dAtA[i] = 0x8
		i++
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CacheTTL.Size()))
	n54, err := m.CacheTTL.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n54
	return i, nil
}

func (m *KubeletWebhookAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletWebhookAuthorization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CacheAuthorizedTTL.Size()))
	n55, err := m.CacheAuthorizedTTL.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n55
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CacheUnauthorizedTTL.Size()))
	n56, err := m.CacheUnauthorizedTTL.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n56
	return i, nil
}

func (m *KubeletX509Authentication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletX509Authentication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientCAFile)))
	i += copy(dAtA[i:], m.ClientCAFile)
	return i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ContainerRuntimeConfig) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ContainerRuntimeConfigCondition) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastTransitionTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ContainerRuntimeConfigList) Size() (n int) {
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ContainerRuntimeConfigSpec) Size() (n int) {
	var l int
	_ = l
	if m.MachineConfigPoolSelector != nil {
		l = m.MachineConfigPoolSelector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ContainerRuntimeConfig != nil {
		l = m.ContainerRuntimeConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ContainerRuntimeConfigStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ContainerRuntimeConfiguration) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.PidsLimit))
	l = len(m.LogLevel)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LogSizeMax.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.OverlaySize.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ControllerConfig) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ControllerConfigList) Size() (n int) {
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ControllerConfigSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterDNSIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CloudProviderConfig)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Platform)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.EtcdDiscoveryDomain)
	n += 1 + l + sovGenerated(uint64(l))
	if m.EtcdCAData != nil {
		l = len(m.EtcdCAData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EtcdMetricCAData != nil {
		l = len(m.EtcdMetricCAData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.RootCAData != nil {
		l = len(m.RootCAData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PullSecret != nil {
		l = m.PullSecret.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Images) > 0 {
		for k, v := range m.Images {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.OSImageURL)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ControllerConfigStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ControllerConfigStatusCondition) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastTransitionTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletConfig) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletConfigCondition) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastTransitionTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletConfigList) Size() (n int) {
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KubeletConfigSpec) Size() (n int) {
	var l int
	_ = l
	if m.MachineConfigPoolSelector != nil {
		l = m.MachineConfigPoolSelector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.KubeletConfig != nil {
		l = m.KubeletConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *KubeletConfigStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MCOConfig) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MCOConfigList) Size() (n int) {
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MCOConfigSpec) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MachineConfigPool) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MachineConfigPoolCondition) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastTransitionTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MachineConfigPoolList) Size() (n int) {
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MachineConfigPoolSpec) Size() (n int) {
	var l int
	_ = l
	if m.MachineConfigSelector != nil {
		l = m.MachineConfigSelector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 2
	if m.MaxUnavailable != nil {
		l = m.MaxUnavailable.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *MachineConfigPoolStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	l = m.Configuration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MachineCount))
	n += 1 + sovGenerated(uint64(m.UpdatedMachineCount))
	n += 1 + sovGenerated(uint64(m.ReadyMachineCount))
	n += 1 + sovGenerated(uint64(m.UnavailableMachineCount))
	n += 1 + sovGenerated(uint64(m.DegradedMachineCount))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *MachineConfigPoolStatusConfiguration) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectReference.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Source) > 0 {
		for _, e := range m.Source {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KubeletAnonymousAuthentication) Size() (n int) {
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	return n
}

func (m *KubeletAuthentication) Size() (n int) {
	var l int
	_ = l
	l = m.X509.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Webhook.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Anonymous.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletAuthorization) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mode)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Webhook.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletConfiguration) Size() (n int) {
	var l int
	_ = l
	l = len(m.StaticPodPath)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.SyncFrequency.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.FileCheckFrequency.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.HTTPCheckFrequency.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.StaticPodURL)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.StaticPodURLHeader) > 0 {
		for k, v := range m.StaticPodURLHeader {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.Address)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Port))
	n += 1 + sovGenerated(uint64(m.ReadOnlyPort))
	l = len(m.TLSCertFile)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TLSPrivateKeyFile)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.TLSCipherSuites) > 0 {
		for _, s := range m.TLSCipherSuites {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.TLSMinVersion)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 2
	l = m.Authentication.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Authorization.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.RegistryPullQPS != nil {
		n += 2 + sovGenerated(uint64(*m.RegistryPullQPS))
	}
	n += 2 + sovGenerated(uint64(m.RegistryBurst))
	if m.EventRecordQPS != nil {
		n += 2 + sovGenerated(uint64(*m.EventRecordQPS))
	}
	n += 2 + sovGenerated(uint64(m.EventBurst))
	if m.EnableDebuggingHandlers != nil {
		n += 3
	}
	n += 3
	if m.HealthzPort != nil {
		n += 2 + sovGenerated(uint64(*m.HealthzPort))
	}
	l = len(m.HealthzBindAddress)
	n += 2 + l + sovGenerated(uint64(l))
	if m.OOMScoreAdj != nil {
		n += 2 + sovGenerated(uint64(*m.OOMScoreAdj))
	}
	l = len(m.ClusterDomain)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.ClusterDNS) > 0 {
		for _, s := range m.ClusterDNS {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = m.StreamingConnectionIdleTimeout.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.NodeStatusUpdateFrequency.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.NodeStatusReportFrequency.Size()
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.NodeLeaseDurationSeconds))
	l = m.ImageMinimumGCAge.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if m.ImageGCHighThresholdPercent != nil {
		n += 2 + sovGenerated(uint64(*m.ImageGCHighThresholdPercent))
	}
	if m.ImageGCLowThresholdPercent != nil {
		n += 2 + sovGenerated(uint64(*m.ImageGCLowThresholdPercent))
	}
	l = m.VolumeStatsAggPeriod.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.KubeletCgroups)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SystemCgroups)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.CgroupRoot)
	n += 2 + l + sovGenerated(uint64(l))
	if m.CgroupsPerQOS != nil {
		n += 3
	}
	l = len(m.CgroupDriver)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.CPUManagerPolicy)
	n += 2 + l + sovGenerated(uint64(l))
	l = m.CPUManagerReconcilePeriod.Size()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.QOSReserved) > 0 {
		for k, v := range m.QOSReserved {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = m.RuntimeRequestTimeout.Size()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.HairpinMode)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.MaxPods))
	l = len(m.PodCIDR)
	n += 2 + l + sovGenerated(uint64(l))
	if m.PodPidsLimit != nil {
		n += 2 + sovGenerated(uint64(*m.PodPidsLimit))
	}
	l = len(m.ResolverConfig)
	n += 2 + l + sovGenerated(uint64(l))
	if m.CPUCFSQuota != nil {
		n += 3
	}
	if m.CPUCFSQuotaPeriod != nil {
		l = m.CPUCFSQuotaPeriod.Size()
		n += 2 + l + sovGenerated(uint64(l))
	}
	n += 2 + sovGenerated(uint64(m.MaxOpenFiles))
	l = len(m.ContentType)
	n += 2 + l + sovGenerated(uint64(l))
	if m.KubeAPIQPS != nil {
		n += 2 + sovGenerated(uint64(*m.KubeAPIQPS))
	}
	n += 2 + sovGenerated(uint64(m.KubeAPIBurst))
	if m.SerializeImagePulls != nil {
		n += 3
	}
	if len(m.EvictionHard) > 0 {
		for k, v := range m.EvictionHard {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.EvictionSoft) > 0 {
		for k, v := range m.EvictionSoft {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.EvictionSoftGracePeriod) > 0 {
		for k, v := range m.EvictionSoftGracePeriod {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = m.EvictionPressureTransitionPeriod.Size()
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.EvictionMaxPodGracePeriod))
	if len(m.EvictionMinimumReclaim) > 0 {
		for k, v := range m.EvictionMinimumReclaim {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	n += 2 + sovGenerated(uint64(m.PodsPerCore))
	if m.EnableControllerAttachDetach != nil {
		n += 3
	}
	n += 3
	if m.MakeIPTablesUtilChains != nil {
		n += 3
	}
	if m.IPTablesMasqueradeBit != nil {
		n += 2 + sovGenerated(uint64(*m.IPTablesMasqueradeBit))
	}
	if m.IPTablesDropBit != nil {
		n += 2 + sovGenerated(uint64(*m.IPTablesDropBit))
	}
	if len(m.FeatureGates) > 0 {
		for k, v := range m.FeatureGates {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.FailSwapOn != nil {
		n += 3
	}
	l = len(m.ContainerLogMaxSize)
	n += 2 + l + sovGenerated(uint64(l))
	if m.ContainerLogMaxFiles != nil {
		n += 2 + sovGenerated(uint64(*m.ContainerLogMaxFiles))
	}
	l = len(m.ConfigMapAndSecretChangeDetectionStrategy)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.SystemReserved) > 0 {
		for k, v := range m.SystemReserved {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.KubeReserved) > 0 {
		for k, v := range m.KubeReserved {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.SystemReservedCgroup)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.KubeReservedCgroup)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.EnforceNodeAllocatable) > 0 {
		for _, s := range m.EnforceNodeAllocatable {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KubeletWebhookAuthentication) Size() (n int) {
	var l int
	_ = l
	if m.Enabled != nil {
		n += 2
	}
	l = m.CacheTTL.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletWebhookAuthorization) Size() (n int) {
	var l int
	_ = l
	l = m.CacheAuthorizedTTL.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CacheUnauthorizedTTL.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletX509Authentication) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientCAFile)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContainerRuntimeConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeConfig{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ContainerRuntimeConfigSpec", "ContainerRuntimeConfigSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ContainerRuntimeConfigStatus", "ContainerRuntimeConfigStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerRuntimeConfigCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeConfigCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(strings.Replace(this.LastTransitionTime.String(), "Time", "k8s_io_apimachinery_pkg_apis_meta_v1.Time", 1), `&`, ``, 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerRuntimeConfigList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeConfigList{`,
		`ListMeta:` + strings.Replace(strings.Replace(this.ListMeta.String(), "ListMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Items), "ContainerRuntimeConfig", "ContainerRuntimeConfig", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerRuntimeConfigSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeConfigSpec{`,
		`MachineConfigPoolSelector:` + strings.Replace(fmt.Sprintf("%v", this.MachineConfigPoolSelector), "LabelSelector", "k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector", 1) + `,`,
		`ContainerRuntimeConfig:` + strings.Replace(fmt.Sprintf("%v", this.ContainerRuntimeConfig), "ContainerRuntimeConfiguration", "ContainerRuntimeConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerRuntimeConfigStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeConfigStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Conditions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Conditions), "ContainerRuntimeConfigCondition", "ContainerRuntimeConfigCondition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerRuntimeConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeConfiguration{`,
		`PidsLimit:` + fmt.Sprintf("%v", this.PidsLimit) + `,`,
		`LogLevel:` + fmt.Sprintf("%v", this.LogLevel) + `,`,
		`LogSizeMax:` + strings.Replace(strings.Replace(this.LogSizeMax.String(), "Quantity", "k8s_io_apimachinery_pkg_api_resource.Quantity", 1), `&`, ``, 1) + `,`,
		`OverlaySize:` + strings.Replace(strings.Replace(this.OverlaySize.String(), "Quantity", "k8s_io_apimachinery_pkg_api_resource.Quantity", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControllerConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControllerConfig{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ControllerConfigSpec", "ControllerConfigSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ControllerConfigStatus", "ControllerConfigStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControllerConfigList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControllerConfigList{`,
		`ListMeta:` + strings.Replace(strings.Replace(this.ListMeta.String(), "ListMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Items), "ControllerConfig", "ControllerConfig", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControllerConfigSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForImages := make([]string, 0, len(this.Images))
	for k := range this.Images {
		keysForImages = append(keysForImages, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForImages)
	mapStringForImages := "map[string]string{"
	for _, k := range keysForImages {
		mapStringForImages += fmt.Sprintf("%v: %v,", k, this.Images[k])
	}
	mapStringForImages += "}"
	s := strings.Join([]string{`&ControllerConfigSpec{`,
		`ClusterDNSIP:` + fmt.Sprintf("%v", this.ClusterDNSIP) + `,`,
		`CloudProviderConfig:` + fmt.Sprintf("%v", this.CloudProviderConfig) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`EtcdDiscoveryDomain:` + fmt.Sprintf("%v", this.EtcdDiscoveryDomain) + `,`,
		`EtcdCAData:` + valueToStringGenerated(this.EtcdCAData) + `,`,
		`EtcdMetricCAData:` + valueToStringGenerated(this.EtcdMetricCAData) + `,`,
		`RootCAData:` + valueToStringGenerated(this.RootCAData) + `,`,
		`PullSecret:` + strings.Replace(fmt.Sprintf("%v", this.PullSecret), "ObjectReference", "k8s_io_api_core_v1.ObjectReference", 1) + `,`,
		`Images:` + mapStringForImages + `,`,
		`OSImageURL:` + fmt.Sprintf("%v", this.OSImageURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControllerConfigStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControllerConfigStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Conditions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Conditions), "ControllerConfigStatusCondition", "ControllerConfigStatusCondition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControllerConfigStatusCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControllerConfigStatusCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(strings.Replace(this.LastTransitionTime.String(), "Time", "k8s_io_apimachinery_pkg_apis_meta_v1.Time", 1), `&`, ``, 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletConfig{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "KubeletConfigSpec", "KubeletConfigSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "KubeletConfigStatus", "KubeletConfigStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletConfigCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletConfigCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(strings.Replace(this.LastTransitionTime.String(), "Time", "k8s_io_apimachinery_pkg_apis_meta_v1.Time", 1), `&`, ``, 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletConfigList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletConfigList{`,
		`ListMeta:` + strings.Replace(strings.Replace(this.ListMeta.String(), "ListMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Items), "KubeletConfig", "KubeletConfig", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletConfigSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletConfigSpec{`,
		`MachineConfigPoolSelector:` + strings.Replace(fmt.Sprintf("%v", this.MachineConfigPoolSelector), "LabelSelector", "k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector", 1) + `,`,
		`KubeletConfig:` + strings.Replace(fmt.Sprintf("%v", this.KubeletConfig), "KubeletConfiguration", "k8s_io_kubelet_config_v1beta1.KubeletConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletConfigStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletConfigStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Conditions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Conditions), "KubeletConfigCondition", "KubeletConfigCondition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MCOConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MCOConfig{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MCOConfigSpec", "MCOConfigSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MCOConfigList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MCOConfigList{`,
		`ListMeta:` + strings.Replace(strings.Replace(this.ListMeta.String(), "ListMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Items), "MCOConfig", "MCOConfig", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MCOConfigSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MCOConfigSpec{`,
		`}`,
	}, "")
	return s
}
func (this *MachineConfigPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineConfigPool{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "MachineConfigPoolSpec", "MachineConfigPoolSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "MachineConfigPoolStatus", "MachineConfigPoolStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineConfigPoolCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineConfigPoolCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastTransitionTime:` + strings.Replace(strings.Replace(this.LastTransitionTime.String(), "Time", "k8s_io_apimachinery_pkg_apis_meta_v1.Time", 1), `&`, ``, 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineConfigPoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineConfigPoolList{`,
		`ListMeta:` + strings.Replace(strings.Replace(this.ListMeta.String(), "ListMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Items), "MachineConfigPool", "MachineConfigPool", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineConfigPoolSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineConfigPoolSpec{`,
		`MachineConfigSelector:` + strings.Replace(fmt.Sprintf("%v", this.MachineConfigSelector), "LabelSelector", "k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector", 1) + `,`,
		`NodeSelector:` + strings.Replace(fmt.Sprintf("%v", this.NodeSelector), "LabelSelector", "k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector", 1) + `,`,
		`Paused:` + fmt.Sprintf("%v", this.Paused) + `,`,
		`MaxUnavailable:` + strings.Replace(fmt.Sprintf("%v", this.MaxUnavailable), "IntOrString", "k8s_io_apimachinery_pkg_util_intstr.IntOrString", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineConfigPoolStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineConfigPoolStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Configuration:` + strings.Replace(strings.Replace(this.Configuration.String(), "MachineConfigPoolStatusConfiguration", "MachineConfigPoolStatusConfiguration", 1), `&`, ``, 1) + `,`,
		`MachineCount:` + fmt.Sprintf("%v", this.MachineCount) + `,`,
		`UpdatedMachineCount:` + fmt.Sprintf("%v", this.UpdatedMachineCount) + `,`,
		`ReadyMachineCount:` + fmt.Sprintf("%v", this.ReadyMachineCount) + `,`,
		`UnavailableMachineCount:` + fmt.Sprintf("%v", this.UnavailableMachineCount) + `,`,
		`DegradedMachineCount:` + fmt.Sprintf("%v", this.DegradedMachineCount) + `,`,
		`Conditions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Conditions), "MachineConfigPoolCondition", "MachineConfigPoolCondition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineConfigPoolStatusConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineConfigPoolStatusConfiguration{`,
		`ObjectReference:` + strings.Replace(strings.Replace(this.ObjectReference.String(), "ObjectReference", "k8s_io_api_core_v1.ObjectReference", 1), `&`, ``, 1) + `,`,
		`Source:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Source), "ObjectReference", "k8s_io_api_core_v1.ObjectReference", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletAnonymousAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletAnonymousAuthentication{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletAuthentication{`,
		`X509:` + strings.Replace(strings.Replace(this.X509.String(), "KubeletX509Authentication", "k8s_io_kubelet_config_v1beta1.KubeletX509Authentication", 1), `&`, ``, 1) + `,`,
		`Webhook:` + strings.Replace(strings.Replace(this.Webhook.String(), "KubeletWebhookAuthentication", "k8s_io_kubelet_config_v1beta1.KubeletWebhookAuthentication", 1), `&`, ``, 1) + `,`,
		`Anonymous:` + strings.Replace(strings.Replace(this.Anonymous.String(), "KubeletAnonymousAuthentication", "k8s_io_kubelet_config_v1beta1.KubeletAnonymousAuthentication", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletAuthorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletAuthorization{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Webhook:` + strings.Replace(strings.Replace(this.Webhook.String(), "KubeletWebhookAuthorization", "k8s_io_kubelet_config_v1beta1.KubeletWebhookAuthorization", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForStaticPodURLHeader := make([]string, 0, len(this.StaticPodURLHeader))
	for k := range this.StaticPodURLHeader {
		keysForStaticPodURLHeader = append(keysForStaticPodURLHeader, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStaticPodURLHeader)
	mapStringForStaticPodURLHeader := "map[string]string{"
	for _, k := range keysForStaticPodURLHeader {
		mapStringForStaticPodURLHeader += fmt.Sprintf("%v: %v,", k, this.StaticPodURLHeader[k])
	}
	mapStringForStaticPodURLHeader += "}"
	keysForQOSReserved := make([]string, 0, len(this.QOSReserved))
	for k := range this.QOSReserved {
		keysForQOSReserved = append(keysForQOSReserved, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQOSReserved)
	mapStringForQOSReserved := "map[string]string{"
	for _, k := range keysForQOSReserved {
		mapStringForQOSReserved += fmt.Sprintf("%v: %v,", k, this.QOSReserved[k])
	}
	mapStringForQOSReserved += "}"
	keysForEvictionHard := make([]string, 0, len(this.EvictionHard))
	for k := range this.EvictionHard {
		keysForEvictionHard = append(keysForEvictionHard, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionHard)
	mapStringForEvictionHard := "map[string]string{"
	for _, k := range keysForEvictionHard {
		mapStringForEvictionHard += fmt.Sprintf("%v: %v,", k, this.EvictionHard[k])
	}
	mapStringForEvictionHard += "}"
	keysForEvictionSoft := make([]string, 0, len(this.EvictionSoft))
	for k := range this.EvictionSoft {
		keysForEvictionSoft = append(keysForEvictionSoft, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionSoft)
	mapStringForEvictionSoft := "map[string]string{"
	for _, k := range keysForEvictionSoft {
		mapStringForEvictionSoft += fmt.Sprintf("%v: %v,", k, this.EvictionSoft[k])
	}
	mapStringForEvictionSoft += "}"
	keysForEvictionSoftGracePeriod := make([]string, 0, len(this.EvictionSoftGracePeriod))
	for k := range this.EvictionSoftGracePeriod {
		keysForEvictionSoftGracePeriod = append(keysForEvictionSoftGracePeriod, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionSoftGracePeriod)
	mapStringForEvictionSoftGracePeriod := "map[string]string{"
	for _, k := range keysForEvictionSoftGracePeriod {
		mapStringForEvictionSoftGracePeriod += fmt.Sprintf("%v: %v,", k, this.EvictionSoftGracePeriod[k])
	}
	mapStringForEvictionSoftGracePeriod += "}"
	keysForEvictionMinimumReclaim := make([]string, 0, len(this.EvictionMinimumReclaim))
	for k := range this.EvictionMinimumReclaim {
		keysForEvictionMinimumReclaim = append(keysForEvictionMinimumReclaim, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEvictionMinimumReclaim)
	mapStringForEvictionMinimumReclaim := "map[string]string{"
	for _, k := range keysForEvictionMinimumReclaim {
		mapStringForEvictionMinimumReclaim += fmt.Sprintf("%v: %v,", k, this.EvictionMinimumReclaim[k])
	}
	mapStringForEvictionMinimumReclaim += "}"
	keysForFeatureGates := make([]string, 0, len(this.FeatureGates))
	for k := range this.FeatureGates {
		keysForFeatureGates = append(keysForFeatureGates, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFeatureGates)
	mapStringForFeatureGates := "map[string]bool{"
	for _, k := range keysForFeatureGates {
		mapStringForFeatureGates += fmt.Sprintf("%v: %v,", k, this.FeatureGates[k])
	}
	mapStringForFeatureGates += "}"
	keysForSystemReserved := make([]string, 0, len(this.SystemReserved))
	for k := range this.SystemReserved {
		keysForSystemReserved = append(keysForSystemReserved, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSystemReserved)
	mapStringForSystemReserved := "map[string]string{"
	for _, k := range keysForSystemReserved {
		mapStringForSystemReserved += fmt.Sprintf("%v: %v,", k, this.SystemReserved[k])
	}
	mapStringForSystemReserved += "}"
	keysForKubeReserved := make([]string, 0, len(this.KubeReserved))
	for k := range this.KubeReserved {
		keysForKubeReserved = append(keysForKubeReserved, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKubeReserved)
	mapStringForKubeReserved := "map[string]string{"
	for _, k := range keysForKubeReserved {
		mapStringForKubeReserved += fmt.Sprintf("%v: %v,", k, this.KubeReserved[k])
	}
	mapStringForKubeReserved += "}"
	s := strings.Join([]string{`&KubeletConfiguration{`,
		`StaticPodPath:` + fmt.Sprintf("%v", this.StaticPodPath) + `,`,
		`SyncFrequency:` + strings.Replace(strings.Replace(this.SyncFrequency.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`FileCheckFrequency:` + strings.Replace(strings.Replace(this.FileCheckFrequency.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`HTTPCheckFrequency:` + strings.Replace(strings.Replace(this.HTTPCheckFrequency.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`StaticPodURL:` + fmt.Sprintf("%v", this.StaticPodURL) + `,`,
		`StaticPodURLHeader:` + mapStringForStaticPodURLHeader + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`ReadOnlyPort:` + fmt.Sprintf("%v", this.ReadOnlyPort) + `,`,
		`TLSCertFile:` + fmt.Sprintf("%v", this.TLSCertFile) + `,`,
		`TLSPrivateKeyFile:` + fmt.Sprintf("%v", this.TLSPrivateKeyFile) + `,`,
		`TLSCipherSuites:` + fmt.Sprintf("%v", this.TLSCipherSuites) + `,`,
		`TLSMinVersion:` + fmt.Sprintf("%v", this.TLSMinVersion) + `,`,
		`RotateCertificates:` + fmt.Sprintf("%v", this.RotateCertificates) + `,`,
		`ServerTLSBootstrap:` + fmt.Sprintf("%v", this.ServerTLSBootstrap) + `,`,
		`Authentication:` + strings.Replace(strings.Replace(this.Authentication.String(), "KubeletAuthentication", "k8s_io_kubelet_config_v1beta1.KubeletAuthentication", 1), `&`, ``, 1) + `,`,
		`Authorization:` + strings.Replace(strings.Replace(this.Authorization.String(), "KubeletAuthorization", "k8s_io_kubelet_config_v1beta1.KubeletAuthorization", 1), `&`, ``, 1) + `,`,
		`RegistryPullQPS:` + valueToStringGenerated(this.RegistryPullQPS) + `,`,
		`RegistryBurst:` + fmt.Sprintf("%v", this.RegistryBurst) + `,`,
		`EventRecordQPS:` + valueToStringGenerated(this.EventRecordQPS) + `,`,
		`EventBurst:` + fmt.Sprintf("%v", this.EventBurst) + `,`,
		`EnableDebuggingHandlers:` + valueToStringGenerated(this.EnableDebuggingHandlers) + `,`,
		`EnableContentionProfiling:` + fmt.Sprintf("%v", this.EnableContentionProfiling) + `,`,
		`HealthzPort:` + valueToStringGenerated(this.HealthzPort) + `,`,
		`HealthzBindAddress:` + fmt.Sprintf("%v", this.HealthzBindAddress) + `,`,
		`OOMScoreAdj:` + valueToStringGenerated(this.OOMScoreAdj) + `,`,
		`ClusterDomain:` + fmt.Sprintf("%v", this.ClusterDomain) + `,`,
		`ClusterDNS:` + fmt.Sprintf("%v", this.ClusterDNS) + `,`,
		`StreamingConnectionIdleTimeout:` + strings.Replace(strings.Replace(this.StreamingConnectionIdleTimeout.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`NodeStatusUpdateFrequency:` + strings.Replace(strings.Replace(this.NodeStatusUpdateFrequency.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`NodeStatusReportFrequency:` + strings.Replace(strings.Replace(this.NodeStatusReportFrequency.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`NodeLeaseDurationSeconds:` + fmt.Sprintf("%v", this.NodeLeaseDurationSeconds) + `,`,
		`ImageMinimumGCAge:` + strings.Replace(strings.Replace(this.ImageMinimumGCAge.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`ImageGCHighThresholdPercent:` + valueToStringGenerated(this.ImageGCHighThresholdPercent) + `,`,
		`ImageGCLowThresholdPercent:` + valueToStringGenerated(this.ImageGCLowThresholdPercent) + `,`,
		`VolumeStatsAggPeriod:` + strings.Replace(strings.Replace(this.VolumeStatsAggPeriod.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`KubeletCgroups:` + fmt.Sprintf("%v", this.KubeletCgroups) + `,`,
		`SystemCgroups:` + fmt.Sprintf("%v", this.SystemCgroups) + `,`,
		`CgroupRoot:` + fmt.Sprintf("%v", this.CgroupRoot) + `,`,
		`CgroupsPerQOS:` + valueToStringGenerated(this.CgroupsPerQOS) + `,`,
		`CgroupDriver:` + fmt.Sprintf("%v", this.CgroupDriver) + `,`,
		`CPUManagerPolicy:` + fmt.Sprintf("%v", this.CPUManagerPolicy) + `,`,
		`CPUManagerReconcilePeriod:` + strings.Replace(strings.Replace(this.CPUManagerReconcilePeriod.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`QOSReserved:` + mapStringForQOSReserved + `,`,
		`RuntimeRequestTimeout:` + strings.Replace(strings.Replace(this.RuntimeRequestTimeout.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`HairpinMode:` + fmt.Sprintf("%v", this.HairpinMode) + `,`,
		`MaxPods:` + fmt.Sprintf("%v", this.MaxPods) + `,`,
		`PodCIDR:` + fmt.Sprintf("%v", this.PodCIDR) + `,`,
		`PodPidsLimit:` + valueToStringGenerated(this.PodPidsLimit) + `,`,
		`ResolverConfig:` + fmt.Sprintf("%v", this.ResolverConfig) + `,`,
		`CPUCFSQuota:` + valueToStringGenerated(this.CPUCFSQuota) + `,`,
		`CPUCFSQuotaPeriod:` + strings.Replace(fmt.Sprintf("%v", this.CPUCFSQuotaPeriod), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1) + `,`,
		`MaxOpenFiles:` + fmt.Sprintf("%v", this.MaxOpenFiles) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`KubeAPIQPS:` + valueToStringGenerated(this.KubeAPIQPS) + `,`,
		`KubeAPIBurst:` + fmt.Sprintf("%v", this.KubeAPIBurst) + `,`,
		`SerializeImagePulls:` + valueToStringGenerated(this.SerializeImagePulls) + `,`,
		`EvictionHard:` + mapStringForEvictionHard + `,`,
		`EvictionSoft:` + mapStringForEvictionSoft + `,`,
		`EvictionSoftGracePeriod:` + mapStringForEvictionSoftGracePeriod + `,`,
		`EvictionPressureTransitionPeriod:` + strings.Replace(strings.Replace(this.EvictionPressureTransitionPeriod.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`EvictionMaxPodGracePeriod:` + fmt.Sprintf("%v", this.EvictionMaxPodGracePeriod) + `,`,
		`EvictionMinimumReclaim:` + mapStringForEvictionMinimumReclaim + `,`,
		`PodsPerCore:` + fmt.Sprintf("%v", this.PodsPerCore) + `,`,
		`EnableControllerAttachDetach:` + valueToStringGenerated(this.EnableControllerAttachDetach) + `,`,
		`ProtectKernelDefaults:` + fmt.Sprintf("%v", this.ProtectKernelDefaults) + `,`,
		`MakeIPTablesUtilChains:` + valueToStringGenerated(this.MakeIPTablesUtilChains) + `,`,
		`IPTablesMasqueradeBit:` + valueToStringGenerated(this.IPTablesMasqueradeBit) + `,`,
		`IPTablesDropBit:` + valueToStringGenerated(this.IPTablesDropBit) + `,`,
		`FeatureGates:` + mapStringForFeatureGates + `,`,
		`FailSwapOn:` + valueToStringGenerated(this.FailSwapOn) + `,`,
		`ContainerLogMaxSize:` + fmt.Sprintf("%v", this.ContainerLogMaxSize) + `,`,
		`ContainerLogMaxFiles:` + valueToStringGenerated(this.ContainerLogMaxFiles) + `,`,
		`ConfigMapAndSecretChangeDetectionStrategy:` + fmt.Sprintf("%v", this.ConfigMapAndSecretChangeDetectionStrategy) + `,`,
		`SystemReserved:` + mapStringForSystemReserved + `,`,
		`KubeReserved:` + mapStringForKubeReserved + `,`,
		`SystemReservedCgroup:` + fmt.Sprintf("%v", this.SystemReservedCgroup) + `,`,
		`KubeReservedCgroup:` + fmt.Sprintf("%v", this.KubeReservedCgroup) + `,`,
		`EnforceNodeAllocatable:` + fmt.Sprintf("%v", this.EnforceNodeAllocatable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletWebhookAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletWebhookAuthentication{`,
		`Enabled:` + valueToStringGenerated(this.Enabled) + `,`,
		`CacheTTL:` + strings.Replace(strings.Replace(this.CacheTTL.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletWebhookAuthorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletWebhookAuthorization{`,
		`CacheAuthorizedTTL:` + strings.Replace(strings.Replace(this.CacheAuthorizedTTL.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`CacheUnauthorizedTTL:` + strings.Replace(strings.Replace(this.CacheUnauthorizedTTL.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletX509Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletX509Authentication{`,
		`ClientCAFile:` + fmt.Sprintf("%v", this.ClientCAFile) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContainerRuntimeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRuntimeConfigCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeConfigCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeConfigCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = ContainerRuntimeConfigStatusConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRuntimeConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ContainerRuntimeConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRuntimeConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineConfigPoolSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineConfigPoolSelector == nil {
				m.MachineConfigPoolSelector = &k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector{}
			}
			if err := m.MachineConfigPoolSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerRuntimeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerRuntimeConfig == nil {
				m.ContainerRuntimeConfig = &ContainerRuntimeConfiguration{}
			}
			if err := m.ContainerRuntimeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRuntimeConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, ContainerRuntimeConfigCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRuntimeConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidsLimit", wireType)
			}
			m.PidsLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PidsLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSizeMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogSizeMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlaySize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OverlaySize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ControllerConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDNSIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterDNSIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProviderConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProviderConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtcdDiscoveryDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EtcdDiscoveryDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtcdCAData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EtcdCAData = append(m.EtcdCAData[:0], dAtA[iNdEx:postIndex]...)
			if m.EtcdCAData == nil {
				m.EtcdCAData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtcdMetricCAData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EtcdMetricCAData = append(m.EtcdMetricCAData[:0], dAtA[iNdEx:postIndex]...)
			if m.EtcdMetricCAData == nil {
				m.EtcdMetricCAData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCAData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootCAData = append(m.RootCAData[:0], dAtA[iNdEx:postIndex]...)
			if m.RootCAData == nil {
				m.RootCAData = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PullSecret == nil {
				m.PullSecret = &k8s_io_api_core_v1.ObjectReference{}
			}
			if err := m.PullSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Images == nil {
				m.Images = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Images[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OSImageURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, ControllerConfigStatusCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerConfigStatusCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerConfigStatusCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerConfigStatusCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = ControllerConfigStatusConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletConfigCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletConfigCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletConfigCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = KubeletConfigStatusConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KubeletConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineConfigPoolSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineConfigPoolSelector == nil {
				m.MachineConfigPoolSelector = &k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector{}
			}
			if err := m.MachineConfigPoolSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubeletConfig == nil {
				m.KubeletConfig = &k8s_io_kubelet_config_v1beta1.KubeletConfiguration{}
			}
			if err := m.KubeletConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, KubeletConfigCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MCOConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MCOConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MCOConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MCOConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MCOConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MCOConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MCOConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MCOConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MCOConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MCOConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineConfigPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineConfigPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineConfigPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineConfigPoolCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineConfigPoolCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineConfigPoolCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = MachineConfigPoolConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineConfigPoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineConfigPoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineConfigPoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, MachineConfigPool{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineConfigPoolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineConfigPoolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineConfigPoolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineConfigSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineConfigSelector == nil {
				m.MachineConfigSelector = &k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector{}
			}
			if err := m.MachineConfigSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &k8s_io_apimachinery_pkg_apis_meta_v1.LabelSelector{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnavailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxUnavailable == nil {
				m.MaxUnavailable = &k8s_io_apimachinery_pkg_util_intstr.IntOrString{}
			}
			if err := m.MaxUnavailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineConfigPoolStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineConfigPoolStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineConfigPoolStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineCount", wireType)
			}
			m.MachineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MachineCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedMachineCount", wireType)
			}
			m.UpdatedMachineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedMachineCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyMachineCount", wireType)
			}
			m.ReadyMachineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadyMachineCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnavailableMachineCount", wireType)
			}
			m.UnavailableMachineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnavailableMachineCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegradedMachineCount", wireType)
			}
			m.DegradedMachineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DegradedMachineCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, MachineConfigPoolCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineConfigPoolStatusConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineConfigPoolStatusConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineConfigPoolStatusConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = append(m.Source, k8s_io_api_core_v1.ObjectReference{})
			if err := m.Source[len(m.Source)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletAnonymousAuthentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletAnonymousAuthentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletAnonymousAuthentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletAuthentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletAuthentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletAuthentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X509", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.X509.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Webhook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anonymous", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Anonymous.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = k8s_io_kubelet_config_v1beta1.KubeletAuthorizationMode(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Webhook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticPodPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticPodPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncFrequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SyncFrequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileCheckFrequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FileCheckFrequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPCheckFrequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HTTPCheckFrequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticPodURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticPodURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticPodURLHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaticPodURLHeader == nil {
				m.StaticPodURLHeader = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StaticPodURLHeader[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnlyPort", wireType)
			}
			m.ReadOnlyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOnlyPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSCertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSCertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSPrivateKeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSPrivateKeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSCipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSCipherSuites = append(m.TLSCipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSMinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSMinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotateCertificates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RotateCertificates = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTLSBootstrap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerTLSBootstrap = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Authentication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Authorization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryPullQPS", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegistryPullQPS = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryBurst", wireType)
			}
			m.RegistryBurst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistryBurst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRecordQPS", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventRecordQPS = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventBurst", wireType)
			}
			m.EventBurst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventBurst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDebuggingHandlers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EnableDebuggingHandlers = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableContentionProfiling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableContentionProfiling = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthzPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HealthzPort = &v
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthzBindAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthzBindAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OOMScoreAdj", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OOMScoreAdj = &v
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDNS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterDNS = append(m.ClusterDNS, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingConnectionIdleTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamingConnectionIdleTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStatusUpdateFrequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeStatusUpdateFrequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStatusReportFrequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeStatusReportFrequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLeaseDurationSeconds", wireType)
			}
			m.NodeLeaseDurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeLeaseDurationSeconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMinimumGCAge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImageMinimumGCAge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageGCHighThresholdPercent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImageGCHighThresholdPercent = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageGCLowThresholdPercent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImageGCLowThresholdPercent = &v
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeStatsAggPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeStatsAggPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletCgroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeletCgroups = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemCgroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemCgroups = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgroupRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupsPerQOS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CgroupsPerQOS = &b
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupDriver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgroupDriver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUManagerPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPUManagerPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUManagerReconcilePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CPUManagerReconcilePeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QOSReserved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QOSReserved == nil {
				m.QOSReserved = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QOSReserved[mapkey] = mapvalue
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeRequestTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RuntimeRequestTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HairpinMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HairpinMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPods", wireType)
			}
			m.MaxPods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPods |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodPidsLimit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PodPidsLimit = &v
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolverConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolverConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUCFSQuota", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CPUCFSQuota = &b
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUCFSQuotaPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CPUCFSQuotaPeriod == nil {
				m.CPUCFSQuotaPeriod = &k8s_io_apimachinery_pkg_apis_meta_v1.Duration{}
			}
			if err := m.CPUCFSQuotaPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOpenFiles", wireType)
			}
			m.MaxOpenFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOpenFiles |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeAPIQPS", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KubeAPIQPS = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeAPIBurst", wireType)
			}
			m.KubeAPIBurst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KubeAPIBurst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializeImagePulls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SerializeImagePulls = &b
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictionHard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvictionHard == nil {
				m.EvictionHard = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EvictionHard[mapkey] = mapvalue
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictionSoft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvictionSoft == nil {
				m.EvictionSoft = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EvictionSoft[mapkey] = mapvalue
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictionSoftGracePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvictionSoftGracePeriod == nil {
				m.EvictionSoftGracePeriod = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EvictionSoftGracePeriod[mapkey] = mapvalue
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictionPressureTransitionPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EvictionPressureTransitionPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictionMaxPodGracePeriod", wireType)
			}
			m.EvictionMaxPodGracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvictionMaxPodGracePeriod |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictionMinimumReclaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvictionMinimumReclaim == nil {
				m.EvictionMinimumReclaim = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EvictionMinimumReclaim[mapkey] = mapvalue
			iNdEx = postIndex
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodsPerCore", wireType)
			}
			m.PodsPerCore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodsPerCore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableControllerAttachDetach", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EnableControllerAttachDetach = &b
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectKernelDefaults", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectKernelDefaults = bool(v != 0)
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeIPTablesUtilChains", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.MakeIPTablesUtilChains = &b
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPTablesMasqueradeBit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IPTablesMasqueradeBit = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPTablesDropBit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IPTablesDropBit = &v
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureGates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureGates == nil {
				m.FeatureGates = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FeatureGates[mapkey] = mapvalue
			iNdEx = postIndex
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailSwapOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FailSwapOn = &b
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerLogMaxSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerLogMaxSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerLogMaxFiles", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContainerLogMaxFiles = &v
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMapAndSecretChangeDetectionStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMapAndSecretChangeDetectionStrategy = k8s_io_kubelet_config_v1beta1.ResourceChangeDetectionStrategy(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemReserved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemReserved == nil {
				m.SystemReserved = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SystemReserved[mapkey] = mapvalue
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeReserved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubeReserved == nil {
				m.KubeReserved = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.KubeReserved[mapkey] = mapvalue
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemReservedCgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemReservedCgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeReservedCgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeReservedCgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforceNodeAllocatable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnforceNodeAllocatable = append(m.EnforceNodeAllocatable, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletWebhookAuthentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletWebhookAuthentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletWebhookAuthentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CacheTTL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletWebhookAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletWebhookAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletWebhookAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheAuthorizedTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CacheAuthorizedTTL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheUnauthorizedTTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CacheUnauthorizedTTL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletX509Authentication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletX509Authentication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletX509Authentication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCAFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCAFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/openshift/api/machineconfiguration/v1/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 4115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcd, 0x6f, 0x1c, 0xc9,
	0x75, 0x57, 0x53, 0xa2, 0x3e, 0x8a, 0x1f, 0x22, 0x4b, 0x94, 0xd4, 0xa2, 0xb4, 0x1c, 0x79, 0x6c,
	0x6f, 0x24, 0xc7, 0x3b, 0x94, 0xb4, 0xda, 0xb5, 0xb4, 0x6b, 0xed, 0x2e, 0x67, 0x48, 0x91, 0x5c,
	0xce, 0x88, 0xa3, 0x37, 0xe4, 0xda, 0x59, 0x2c, 0x1c, 0x37, 0xbb, 0x8b, 0x33, 0x6d, 0xf6, 0x74,
	0xcd, 0x76, 0xd7, 0xcc, 0x6a, 0x84, 0x1c, 0x0c, 0x38, 0x39, 0xe4, 0x92, 0x18, 0x49, 0x4e, 0x41,
	0x90, 0x1c, 0x9c, 0x53, 0xfe, 0x84, 0x1c, 0x72, 0xcd, 0x06, 0x39, 0x44, 0x40, 0x10, 0xc4, 0x41,
	0x10, 0x3a, 0xcb, 0x1c, 0x82, 0x00, 0x39, 0xe5, 0x12, 0x64, 0x81, 0x04, 0x41, 0x55, 0x57, 0x7f,
	0xd4, 0x74, 0xf7, 0x88, 0x1f, 0x63, 0xc1, 0x87, 0xbd, 0x08, 0xe2, 0xfb, 0xf8, 0xbd, 0x57, 0x55,
	0xaf, 0xde, 0x7b, 0x55, 0xd5, 0x83, 0x3e, 0x68, 0xda, 0xac, 0xd5, 0xdd, 0x29, 0x99, 0xb4, 0xbd,
	0x48, 0x3b, 0xc4, 0xf5, 0x5b, 0xf6, 0x2e, 0x5b, 0x34, 0x3a, 0xf6, 0x62, 0xdb, 0x30, 0x5b, 0xb6,
	0x4b, 0x4c, 0xea, 0xee, 0xda, 0xcd, 0xae, 0x67, 0x30, 0x9b, 0xba, 0x8b, 0xbd, 0xbb, 0x8b, 0x4d,
	0xe2, 0x12, 0xcf, 0x60, 0xc4, 0x2a, 0x75, 0x3c, 0xca, 0x28, 0xbe, 0x13, 0x23, 0x94, 0x22, 0x84,
	0x92, 0xd1, 0xb1, 0x4b, 0x59, 0x08, 0xa5, 0xde, 0xdd, 0xf9, 0x37, 0x12, 0x36, 0x9b, 0xb4, 0x49,
	0x17, 0x05, 0xd0, 0x4e, 0x77, 0x57, 0xfc, 0x25, 0xfe, 0x10, 0xff, 0x0b, 0x0c, 0xcc, 0x17, 0xf7,
	0x1e, 0xf8, 0x25, 0x9b, 0x0a, 0xa7, 0x4c, 0xea, 0x91, 0x0c, 0x27, 0xe6, 0xef, 0xc7, 0x32, 0xd2,
	0xaa, 0xd7, 0x5f, 0xec, 0xec, 0x35, 0x85, 0x92, 0x47, 0x7c, 0xda, 0xf5, 0x4c, 0x72, 0x24, 0x2d,
	0x7f, 0xb1, 0x4d, 0x98, 0x91, 0x65, 0xeb, 0xed, 0x3c, 0x2d, 0xaf, 0xeb, 0x32, 0xbb, 0x4d, 0x16,
	0x7d, 0xb3, 0x45, 0xda, 0x46, 0x4a, 0xef, 0xcd, 0x3c, 0xbd, 0x2e, 0xb3, 0x9d, 0x45, 0xdb, 0x65,
	0x3e, 0xf3, 0x52, 0x4a, 0x6f, 0x48, 0xa5, 0xbd, 0xee, 0x0e, 0x71, 0x08, 0x5b, 0x0c, 0x26, 0x73,
	0xb1, 0x77, 0x77, 0x87, 0x30, 0x23, 0xe5, 0x5b, 0xf1, 0x60, 0x0c, 0x5d, 0xa9, 0x50, 0x97, 0x19,
	0x1c, 0x1d, 0x02, 0x7f, 0x2a, 0x42, 0x05, 0xff, 0x10, 0x9d, 0xe7, 0x23, 0xb2, 0x0c, 0x66, 0xe8,
	0xda, 0x4d, 0xed, 0xd6, 0xc4, 0xbd, 0x3b, 0xa5, 0x00, 0xbc, 0x94, 0xf4, 0xa8, 0xd4, 0xd9, 0x6b,
	0x72, 0x82, 0x5f, 0xe2, 0xd2, 0xa5, 0xde, 0xdd, 0xd2, 0xe6, 0xce, 0x8f, 0x88, 0xc9, 0x6a, 0x84,
	0x19, 0x65, 0xfc, 0xf9, 0x7e, 0xe1, 0xd4, 0xc1, 0x7e, 0x01, 0xc5, 0x34, 0x88, 0x50, 0xb1, 0x8b,
	0xce, 0xf8, 0x1d, 0x62, 0xea, 0x63, 0x02, 0xbd, 0x5a, 0x3a, 0x6a, 0x60, 0x94, 0xb2, 0x3d, 0x6f,
	0x74, 0x88, 0x59, 0x9e, 0x94, 0x96, 0xcf, 0xf0, 0xbf, 0x40, 0xd8, 0xc1, 0x3d, 0x74, 0xd6, 0x67,
	0x06, 0xeb, 0xfa, 0xfa, 0x69, 0x61, 0xf1, 0xc9, 0xc8, 0x2c, 0x0a, 0xd4, 0xf2, 0xb4, 0xb4, 0x79,
	0x36, 0xf8, 0x1b, 0xa4, 0xb5, 0xe2, 0xef, 0x9e, 0x46, 0x85, 0x6c, 0xc5, 0x0a, 0x75, 0x2d, 0x9b,
	0x63, 0xe3, 0x1a, 0x3a, 0xc3, 0xfa, 0x1d, 0x22, 0x66, 0xfa, 0x42, 0xf9, 0x61, 0xe8, 0xfd, 0x56,
	0xbf, 0x43, 0xbe, 0xdc, 0x2f, 0xdc, 0x1e, 0x66, 0x37, 0x02, 0xe1, 0xc2, 0x20, 0x60, 0x70, 0x35,
	0x1a, 0xea, 0x98, 0x00, 0xbc, 0xaf, 0xba, 0xf6, 0xe5, 0x7e, 0x21, 0x63, 0x97, 0x94, 0x22, 0x24,
	0x75, 0x00, 0xb8, 0x87, 0xb0, 0x63, 0xf8, 0x6c, 0xcb, 0x33, 0x5c, 0x3f, 0xb0, 0x64, 0xb7, 0x89,
	0x9c, 0xc4, 0x6f, 0x1d, 0x2e, 0x28, 0xb8, 0x46, 0x79, 0x5e, 0x7a, 0x81, 0xab, 0x29, 0x34, 0xc8,
	0xb0, 0x80, 0x5f, 0x47, 0x67, 0x3d, 0x62, 0xf8, 0xd4, 0xd5, 0xcf, 0x88, 0x51, 0x44, 0x13, 0x0c,
	0x82, 0x0a, 0x92, 0x8b, 0x6f, 0xa3, 0x73, 0x6d, 0xe2, 0xfb, 0x46, 0x93, 0xe8, 0xe3, 0x42, 0xf0,
	0xa2, 0x14, 0x3c, 0x57, 0x0b, 0xc8, 0x10, 0xf2, 0x8b, 0xff, 0xa1, 0xa1, 0xf9, 0xec, 0xc9, 0xac,
	0xda, 0x3e, 0xc3, 0x9f, 0xa4, 0x82, 0xbe, 0x74, 0xb8, 0xf1, 0x71, 0x6d, 0x11, 0xf2, 0x33, 0xd2,
	0xf4, 0xf9, 0x90, 0x92, 0x08, 0xf8, 0x36, 0x1a, 0xb7, 0x19, 0x69, 0xf3, 0x45, 0x39, 0x7d, 0x6b,
	0xe2, 0xde, 0xda, 0xa8, 0xe2, 0xaf, 0x3c, 0x25, 0x8d, 0x8e, 0xaf, 0x73, 0x78, 0x08, 0xac, 0x14,
	0xff, 0x61, 0x2c, 0x6f, 0xac, 0x7c, 0x53, 0xe0, 0x9f, 0x6a, 0xe8, 0x9a, 0xb4, 0x13, 0x50, 0xeb,
	0x94, 0x3a, 0x0d, 0xe2, 0x10, 0x93, 0x51, 0x4f, 0x8e, 0xfe, 0xcd, 0x43, 0x8e, 0xde, 0xd8, 0x21,
	0x91, 0x6a, 0xf9, 0xb5, 0x83, 0xfd, 0xc2, 0xb5, 0x5a, 0x1e, 0x32, 0xe4, 0x1b, 0xc5, 0x3f, 0xd3,
	0xd0, 0x15, 0x33, 0xd3, 0x63, 0x99, 0x24, 0x36, 0x47, 0x35, 0x65, 0x52, 0xa0, 0x3c, 0x7f, 0xb0,
	0x5f, 0xc8, 0xc9, 0x80, 0x90, 0xe3, 0x4a, 0xf1, 0xbf, 0x34, 0x74, 0x63, 0xd8, 0x86, 0xc4, 0x1f,
	0x22, 0x4c, 0x77, 0x7c, 0xe2, 0xf5, 0x88, 0xb5, 0x1a, 0x24, 0x5c, 0x9b, 0xba, 0x62, 0x46, 0x4f,
	0xc7, 0x7b, 0x60, 0x33, 0x25, 0x01, 0x19, 0x5a, 0xf8, 0x77, 0x34, 0x84, 0xcc, 0x70, 0x5f, 0x86,
	0x91, 0xf3, 0x74, 0x54, 0xd3, 0x10, 0xed, 0xf8, 0x38, 0x55, 0x47, 0x24, 0x1f, 0x12, 0x86, 0x8b,
	0x7f, 0x33, 0x86, 0x5e, 0x1b, 0x3a, 0x95, 0x78, 0x11, 0x5d, 0xe8, 0xd8, 0x96, 0x5f, 0xb5, 0xdb,
	0x36, 0x93, 0x83, 0x9d, 0x95, 0xa0, 0x17, 0xea, 0x21, 0x03, 0x62, 0x19, 0xfc, 0x6d, 0x74, 0xde,
	0xa1, 0xcd, 0x2a, 0xe9, 0x11, 0x47, 0xa6, 0xa9, 0x78, 0xf3, 0x48, 0x3a, 0x44, 0x12, 0x78, 0x07,
	0x21, 0x87, 0x36, 0x1b, 0xf6, 0x73, 0x52, 0x33, 0x9e, 0xc9, 0xe4, 0x33, 0x74, 0x73, 0x96, 0xc2,
	0x3a, 0x5e, 0x7a, 0xda, 0x35, 0x5c, 0x66, 0xb3, 0x7e, 0x3c, 0xc8, 0x6a, 0x84, 0x04, 0x09, 0x54,
	0x4c, 0xd0, 0x04, 0xed, 0x11, 0xcf, 0x31, 0xfa, 0x9c, 0x22, 0xb2, 0xce, 0xd1, 0x8d, 0x5c, 0x92,
	0x46, 0x26, 0x36, 0x63, 0x28, 0x48, 0xe2, 0x16, 0x5f, 0x8c, 0xa1, 0x19, 0x3e, 0x97, 0x1e, 0x75,
	0x1c, 0xe2, 0xbd, 0xb2, 0x7a, 0xdb, 0x52, 0xea, 0xed, 0xe3, 0xe3, 0xc5, 0x50, 0xd2, 0xe7, 0xdc,
	0x4a, 0xdb, 0x19, 0xa8, 0xb4, 0x6b, 0x23, 0xb0, 0x35, 0xbc, 0xc6, 0xfe, 0x8b, 0x86, 0xe6, 0x06,
	0x55, 0x5e, 0x41, 0x46, 0x6f, 0xaa, 0x19, 0xbd, 0x7c, 0xf2, 0x71, 0xe6, 0xe4, 0xf2, 0xff, 0x1b,
	0x4f, 0x8f, 0x4f, 0x64, 0xf1, 0x07, 0x68, 0xd2, 0x74, 0xba, 0x3e, 0x23, 0xde, 0xf2, 0x93, 0xc6,
	0x7a, 0x5d, 0x36, 0x10, 0x73, 0x12, 0x64, 0xb2, 0x92, 0xe0, 0x81, 0x22, 0x89, 0x6b, 0xe8, 0x92,
	0xe9, 0xd0, 0xae, 0x55, 0xf7, 0x68, 0xcf, 0xb6, 0x42, 0x50, 0xb9, 0x13, 0xaf, 0x4b, 0x80, 0x4b,
	0x95, 0xb4, 0x08, 0x64, 0xe9, 0xf1, 0xdd, 0xdc, 0x71, 0x0c, 0xb6, 0x4b, 0xbd, 0xb6, 0x58, 0xf5,
	0xc4, 0x6e, 0xae, 0x4b, 0x3a, 0x44, 0x12, 0xdc, 0x38, 0x61, 0xa6, 0xb5, 0x6c, 0xfb, 0x26, 0xdf,
	0x19, 0xfd, 0x65, 0xda, 0x36, 0xec, 0xb0, 0xce, 0x47, 0xc6, 0x57, 0xd2, 0x22, 0x90, 0xa5, 0x87,
	0x4b, 0x08, 0x71, 0x72, 0x65, 0x69, 0x99, 0xaf, 0x33, 0x6f, 0x02, 0x26, 0xcb, 0xd3, 0x7c, 0x23,
	0xac, 0x44, 0x54, 0x48, 0x48, 0xe0, 0x0f, 0xd0, 0x0c, 0xff, 0xab, 0x46, 0x98, 0x67, 0x9b, 0x52,
	0xeb, 0xac, 0xd0, 0x9a, 0x3b, 0xd8, 0x2f, 0xcc, 0xac, 0x0c, 0xf0, 0x20, 0x25, 0xcd, 0x2d, 0x7a,
	0x94, 0x32, 0xa9, 0x7b, 0x2e, 0xb6, 0x08, 0x11, 0x15, 0x12, 0x12, 0xb8, 0x81, 0x50, 0xa7, 0xeb,
	0x38, 0x0d, 0x62, 0x7a, 0x84, 0xe9, 0xe7, 0x45, 0x24, 0x7e, 0x3d, 0x11, 0x89, 0x25, 0xde, 0x84,
	0xc5, 0xdb, 0x19, 0xc8, 0x2e, 0xf1, 0x88, 0x6b, 0x92, 0x00, 0xb4, 0x1e, 0xa9, 0x42, 0x02, 0x06,
	0x3f, 0x47, 0x67, 0xed, 0xb6, 0xd1, 0x24, 0xbe, 0x7e, 0x41, 0xc4, 0x1f, 0x8c, 0x66, 0x4f, 0x97,
	0xd6, 0x05, 0xe8, 0x8a, 0xcb, 0xbc, 0x7e, 0xbc, 0xe3, 0x02, 0x22, 0x48, 0x8b, 0xf8, 0x1e, 0x42,
	0xd4, 0x17, 0xb4, 0x6d, 0xa8, 0xea, 0x48, 0x2c, 0x5c, 0x9c, 0x7f, 0x1a, 0x21, 0x07, 0x12, 0x52,
	0xf3, 0x0f, 0xd1, 0x44, 0x02, 0x1a, 0xcf, 0xa0, 0xd3, 0x7b, 0xa4, 0x1f, 0x84, 0x2c, 0xf0, 0xff,
	0xe2, 0x39, 0x34, 0xde, 0x33, 0x9c, 0x2e, 0x09, 0xa2, 0x10, 0x82, 0x3f, 0xde, 0x19, 0x7b, 0xa0,
	0x15, 0xff, 0x53, 0x0b, 0x4e, 0x2a, 0xe9, 0x9c, 0xf0, 0x2b, 0x5b, 0x6e, 0xd3, 0xae, 0x1e, 0xbe,
	0xdc, 0xfe, 0x44, 0x9e, 0x19, 0x86, 0x60, 0xe0, 0x55, 0xe5, 0xcc, 0xf0, 0xe6, 0xc0, 0x99, 0xe1,
	0xeb, 0x2f, 0x51, 0xff, 0xea, 0xb4, 0xf0, 0xf2, 0xd3, 0xc2, 0x5f, 0x8f, 0xa1, 0xa9, 0x8d, 0xe0,
	0x24, 0xfd, 0xca, 0xaa, 0x34, 0x51, 0xaa, 0x74, 0xe5, 0xe8, 0xa1, 0xa7, 0x38, 0x9c, 0x5b, 0xa2,
	0xdb, 0x03, 0x25, 0x7a, 0xe5, 0xa4, 0x86, 0x86, 0xd7, 0xe7, 0xff, 0x1e, 0x43, 0x57, 0x14, 0xf9,
	0x38, 0x8c, 0x97, 0x95, 0x30, 0xbe, 0x33, 0x10, 0xc6, 0x37, 0x33, 0xac, 0x7c, 0x15, 0xc3, 0x47,
	0x88, 0xe1, 0x7f, 0xd4, 0xd0, 0xac, 0x32, 0x87, 0xaf, 0xa0, 0x2d, 0xb2, 0xd4, 0xb6, 0xe8, 0xfd,
	0x13, 0xc6, 0x56, 0x4e, 0x4f, 0xf4, 0x47, 0x63, 0x03, 0x23, 0xfb, 0x55, 0x3d, 0xd6, 0x3a, 0x68,
	0x6a, 0x2f, 0xe9, 0xa7, 0xdc, 0xdb, 0x91, 0x17, 0x92, 0x59, 0x0a, 0x66, 0xa1, 0x24, 0x2f, 0xeb,
	0xd4, 0x39, 0x08, 0x0f, 0xac, 0xb3, 0x07, 0xfb, 0x05, 0x35, 0x27, 0x81, 0x0a, 0x5e, 0xfc, 0x85,
	0x86, 0x2e, 0x65, 0x6c, 0x9a, 0x91, 0x96, 0xc9, 0xdf, 0xca, 0xa8, 0x92, 0x6b, 0x27, 0x5c, 0xe5,
	0xc3, 0x17, 0xc7, 0x17, 0x1a, 0xba, 0x50, 0xab, 0x6c, 0xbe, 0xb2, 0x94, 0x6c, 0x28, 0x29, 0xf9,
	0x18, 0xd1, 0x1c, 0x39, 0x9b, 0x97, 0x8e, 0x8b, 0x7f, 0xa7, 0xa1, 0xa9, 0x48, 0xea, 0x15, 0xec,
	0xd0, 0x1f, 0xaa, 0x3b, 0xf4, 0xdd, 0x13, 0x8c, 0x29, 0x67, 0x77, 0x5e, 0x4c, 0x0c, 0x88, 0x0f,
	0xb4, 0xf8, 0xf7, 0x63, 0x68, 0x36, 0xb5, 0x7d, 0x5e, 0xc1, 0xea, 0xd9, 0xca, 0xea, 0xad, 0x1e,
	0x63, 0xa4, 0xa9, 0x8d, 0x9d, 0x57, 0x54, 0x3f, 0x1d, 0x28, 0xaa, 0xeb, 0xa3, 0x30, 0x36, 0xbc,
	0xb0, 0xfe, 0xcf, 0x18, 0x9a, 0x4f, 0xe9, 0xc4, 0xc5, 0xb5, 0xac, 0x14, 0xd7, 0xd2, 0x40, 0x71,
	0x5d, 0xc8, 0xd7, 0xfc, 0xaa, 0xb4, 0xbe, 0xbc, 0xb4, 0xfe, 0x42, 0x43, 0x97, 0x53, 0x33, 0xf8,
	0x0a, 0x36, 0x6f, 0x4b, 0xdd, 0xbc, 0x95, 0x11, 0x44, 0x59, 0xce, 0x26, 0xfe, 0xb3, 0xd3, 0x19,
	0x23, 0x14, 0x65, 0xf6, 0xb7, 0x35, 0x74, 0x59, 0xa9, 0x78, 0xa3, 0x28, 0xb1, 0xd7, 0x0e, 0xf6,
	0x0b, 0xaa, 0xbd, 0xa8, 0xbc, 0x66, 0x1b, 0xc3, 0x36, 0x9a, 0x74, 0xa9, 0x45, 0x22, 0xe3, 0x63,
	0xc7, 0x37, 0x3e, 0x73, 0xb0, 0x5f, 0x98, 0x7c, 0x92, 0x00, 0x03, 0x05, 0x9a, 0x07, 0x50, 0xc7,
	0xe8, 0xfa, 0xc4, 0x12, 0xc1, 0x7a, 0x3e, 0x0e, 0xa0, 0xba, 0xa0, 0x82, 0xe4, 0x62, 0x07, 0x4d,
	0xb7, 0x8d, 0x67, 0xdb, 0xae, 0xd1, 0x33, 0x6c, 0xc7, 0xd8, 0x71, 0xc2, 0x7b, 0xc4, 0xfc, 0xbc,
	0xd6, 0x65, 0xb6, 0x53, 0x0a, 0x1e, 0xf4, 0x4a, 0xeb, 0x2e, 0xdb, 0xf4, 0x1a, 0xcc, 0xb3, 0xdd,
	0x66, 0x19, 0x1f, 0xec, 0x17, 0xa6, 0x6b, 0x0a, 0x16, 0x0c, 0x60, 0x17, 0xff, 0x77, 0x1c, 0x5d,
	0xcd, 0xc9, 0x19, 0x23, 0xad, 0xf8, 0x7f, 0xa8, 0xa1, 0x29, 0x25, 0x8c, 0xe4, 0x54, 0x7f, 0x34,
	0xb2, 0x14, 0xa7, 0xf6, 0x39, 0x97, 0xa5, 0x7f, 0x53, 0x0a, 0x19, 0x54, 0x1f, 0xf0, 0x03, 0x34,
	0x19, 0xc5, 0x45, 0xd7, 0x65, 0x62, 0x65, 0xc6, 0xe3, 0xdb, 0xaf, 0x5a, 0x82, 0x07, 0x8a, 0x24,
	0xae, 0xa1, 0x4b, 0xdd, 0x8e, 0x65, 0x30, 0x62, 0x25, 0x85, 0xc4, 0x52, 0x8d, 0xc7, 0x17, 0x50,
	0xdb, 0x69, 0x11, 0xc8, 0xd2, 0xc3, 0xab, 0x68, 0xd6, 0x23, 0x86, 0xd5, 0x57, 0xc0, 0xc6, 0x05,
	0xd8, 0x35, 0x09, 0x36, 0x0b, 0x83, 0x02, 0x90, 0xd6, 0xc1, 0xbf, 0x81, 0xae, 0x76, 0xe3, 0xe5,
	0x55, 0xe0, 0xce, 0x0a, 0xb8, 0x82, 0x84, 0xbb, 0xba, 0x9d, 0x2d, 0x06, 0x79, 0xfa, 0xb8, 0x8e,
	0xe6, 0x2c, 0xd2, 0xf4, 0x0c, 0x6b, 0x60, 0xcc, 0xe7, 0x04, 0xee, 0x0d, 0x89, 0x3b, 0xb7, 0x9c,
	0x21, 0x03, 0x99, 0x9a, 0xf8, 0xc7, 0xea, 0x6d, 0xc9, 0x79, 0x91, 0x8e, 0xaa, 0x23, 0x88, 0x88,
	0xc3, 0xf7, 0x82, 0xff, 0xac, 0xa1, 0x6f, 0x1c, 0x26, 0xa0, 0xf0, 0x2e, 0xba, 0x48, 0xd5, 0xab,
	0x35, 0x99, 0xa9, 0x0e, 0x75, 0x0b, 0x77, 0x55, 0xba, 0x71, 0x71, 0x80, 0x01, 0x83, 0xa0, 0x78,
	0x03, 0x9d, 0x0d, 0x5e, 0x04, 0x64, 0x76, 0x3e, 0xdc, 0x25, 0x5f, 0x54, 0x52, 0x85, 0x2a, 0x48,
	0x88, 0xe2, 0x2a, 0x5a, 0x90, 0x3d, 0xf2, 0x92, 0x4b, 0xdd, 0x7e, 0x9b, 0x76, 0xfd, 0xa5, 0x2e,
	0x6b, 0x11, 0x97, 0xd9, 0x66, 0x30, 0xac, 0x6f, 0xa2, 0x73, 0xc4, 0xe5, 0x4b, 0x6d, 0x89, 0xe1,
	0x9c, 0x2f, 0x4f, 0xf0, 0x52, 0xb5, 0x12, 0x90, 0x20, 0xe4, 0x15, 0xff, 0x76, 0x0c, 0x5d, 0x0e,
	0x91, 0x54, 0x80, 0x8f, 0xd1, 0x99, 0x67, 0x6f, 0xdd, 0x79, 0x28, 0x27, 0xe3, 0xc1, 0xe1, 0xce,
	0x24, 0xdf, 0x7f, 0xeb, 0xce, 0x43, 0x15, 0x27, 0xee, 0x87, 0x38, 0x0f, 0x04, 0x26, 0xde, 0x45,
	0xe7, 0x3e, 0x23, 0x3b, 0x2d, 0x4a, 0xf7, 0x64, 0xb6, 0x78, 0xf7, 0x70, 0xf0, 0xdf, 0x0b, 0x94,
	0x06, 0x2c, 0x44, 0x85, 0x58, 0xb2, 0x21, 0x04, 0xc7, 0x2e, 0xba, 0x60, 0x84, 0xf3, 0x23, 0x5b,
	0x89, 0x47, 0x87, 0xb3, 0x94, 0x33, 0xad, 0xf1, 0xcb, 0x55, 0x24, 0x00, 0xb1, 0x89, 0xe2, 0x3f,
	0x69, 0x68, 0x2e, 0x31, 0x9b, 0xd4, 0xb3, 0x9f, 0x47, 0x93, 0xd9, 0xa6, 0x56, 0xd8, 0x6e, 0x3d,
	0x0e, 0xa7, 0xa4, 0x46, 0x2d, 0xde, 0x6e, 0xbd, 0x3d, 0xf4, 0xe3, 0x8c, 0x52, 0x16, 0x22, 0xd7,
	0x04, 0x81, 0x89, 0xc9, 0xe0, 0x64, 0xbe, 0x73, 0xe4, 0xc9, 0x8c, 0x60, 0xf3, 0xe7, 0xb2, 0xf8,
	0xef, 0xdf, 0x8d, 0xc6, 0xa6, 0x6e, 0xa0, 0x77, 0xd1, 0x14, 0x6f, 0xe1, 0x6c, 0xb3, 0x4e, 0xad,
	0xba, 0xc1, 0x5a, 0x72, 0x90, 0x51, 0xa2, 0x6e, 0x24, 0x99, 0xa0, 0xca, 0xe2, 0x3d, 0x34, 0xe5,
	0xf7, 0x5d, 0xf3, 0xb1, 0x47, 0x3e, 0xed, 0x12, 0xd7, 0xec, 0xcb, 0x21, 0x1c, 0xb2, 0x2b, 0x5a,
	0x4e, 0x55, 0x85, 0x46, 0x12, 0x0c, 0x54, 0x6c, 0xfc, 0x1c, 0xe1, 0x5d, 0xdb, 0x21, 0x95, 0x16,
	0x31, 0xf7, 0x62, 0x8b, 0xa7, 0x8f, 0x65, 0x31, 0xaa, 0x93, 0x8f, 0x53, 0x88, 0x90, 0x61, 0x85,
	0xdb, 0x6e, 0x31, 0xd6, 0x19, 0xb0, 0x7d, 0xe6, 0x64, 0xb6, 0xd7, 0xb6, 0xb6, 0xea, 0x83, 0xb6,
	0xd3, 0x56, 0x78, 0x35, 0x8c, 0x66, 0x7d, 0x1b, 0xaa, 0xb2, 0x7f, 0x8d, 0xaa, 0x61, 0x23, 0xc1,
	0x03, 0x45, 0x12, 0xff, 0x85, 0x86, 0x70, 0x92, 0xb0, 0x46, 0x0c, 0x8b, 0x78, 0xfa, 0x59, 0x91,
	0xc1, 0x7e, 0x70, 0xc2, 0x83, 0x7d, 0x48, 0x6f, 0xa4, 0x0c, 0x04, 0x2f, 0x0c, 0xd1, 0x30, 0xd3,
	0x02, 0x90, 0xe1, 0x15, 0xef, 0xd0, 0x0d, 0xcb, 0xf2, 0x88, 0xef, 0x8b, 0xd2, 0x95, 0xe8, 0xd0,
	0x97, 0x02, 0x32, 0x84, 0x7c, 0x7c, 0x13, 0x9d, 0xe9, 0x50, 0x2f, 0x78, 0x6f, 0x19, 0x8f, 0x53,
	0x54, 0x9d, 0x7a, 0x0c, 0x04, 0x87, 0xcf, 0x19, 0x2f, 0xc2, 0x9b, 0xae, 0xd3, 0xe7, 0x54, 0xfd,
	0x82, 0xda, 0x41, 0x40, 0x82, 0x07, 0x8a, 0x24, 0x7e, 0x0b, 0x4d, 0x30, 0xc7, 0xaf, 0x10, 0x8f,
	0xf1, 0xd0, 0x90, 0x2f, 0x20, 0xd1, 0xe3, 0xef, 0x56, 0xb5, 0x11, 0xb2, 0x20, 0x29, 0xc7, 0x3b,
	0x05, 0xe6, 0xf8, 0x75, 0xcf, 0xee, 0x19, 0x8c, 0x6c, 0x90, 0xbe, 0x50, 0x9e, 0x10, 0xca, 0x51,
	0xa7, 0xb0, 0x55, 0x6d, 0xa8, 0x02, 0x90, 0xd6, 0xc1, 0x8f, 0xd0, 0x45, 0x8e, 0x6b, 0x77, 0x5a,
	0xc4, 0x6b, 0x74, 0x6d, 0x46, 0x7c, 0x7d, 0xf2, 0xe6, 0x69, 0xee, 0x03, 0xaf, 0x53, 0xdc, 0x7e,
	0x82, 0x05, 0x83, 0xb2, 0x7c, 0x3b, 0x33, 0xc7, 0xaf, 0xd9, 0xee, 0x47, 0xc4, 0xf3, 0x79, 0x3f,
	0x37, 0xa5, 0x6e, 0xe7, 0xad, 0x6a, 0x23, 0x66, 0x82, 0x2a, 0xcb, 0x3b, 0x4b, 0x8f, 0x32, 0x83,
	0x11, 0x3e, 0x2c, 0x7b, 0x97, 0x67, 0x4d, 0xe2, 0xeb, 0xd3, 0xa2, 0x00, 0x45, 0xcb, 0x09, 0x29,
	0x09, 0xc8, 0xd0, 0xe2, 0x58, 0xa2, 0xdb, 0xf4, 0xb6, 0xaa, 0x8d, 0x32, 0xa5, 0xbc, 0x0b, 0x36,
	0x3a, 0xfa, 0x45, 0x15, 0xab, 0x91, 0x92, 0x80, 0x0c, 0x2d, 0xcc, 0xd0, 0xb4, 0xa1, 0x24, 0x72,
	0x7d, 0x46, 0xec, 0xbc, 0xfb, 0x87, 0xac, 0x06, 0x6a, 0x11, 0xb8, 0x22, 0xad, 0x4f, 0xab, 0x74,
	0x18, 0xb0, 0x81, 0x3b, 0x68, 0xca, 0x48, 0x66, 0x57, 0x7d, 0xf6, 0x28, 0xf7, 0x7b, 0x6a, 0x62,
	0x8e, 0xe6, 0x5f, 0x21, 0x83, 0x6a, 0x80, 0xaf, 0xbd, 0x47, 0x9a, 0xb6, 0xcf, 0xbc, 0x7e, 0xbd,
	0xeb, 0x38, 0x4f, 0xeb, 0x0d, 0x1d, 0x8b, 0xc0, 0x15, 0x6b, 0x0f, 0x2a, 0x0b, 0x06, 0x65, 0xf9,
	0xda, 0x87, 0xa4, 0x72, 0xd7, 0xf3, 0x99, 0x7e, 0x49, 0x28, 0x47, 0xb6, 0x21, 0xc9, 0x04, 0x55,
	0x16, 0xbf, 0x83, 0xa6, 0x49, 0x8f, 0xb8, 0x0c, 0x88, 0x49, 0x3d, 0x8b, 0x9b, 0x9e, 0x13, 0xda,
	0xe2, 0xb4, 0xb2, 0xa2, 0x70, 0x60, 0x40, 0x12, 0xdf, 0x43, 0x48, 0x50, 0x02, 0xab, 0x97, 0x03,
	0xbd, 0xb0, 0xc3, 0x5b, 0x89, 0x38, 0x90, 0x90, 0xc2, 0xdb, 0xe8, 0x6a, 0xd0, 0xc5, 0x2c, 0x93,
	0x9d, 0x6e, 0xb3, 0x69, 0xbb, 0xcd, 0x35, 0xc3, 0xb5, 0x1c, 0xe2, 0xf9, 0xfa, 0x15, 0x11, 0x24,
	0xd7, 0x79, 0x37, 0xbc, 0x92, 0x2d, 0x02, 0x79, 0xba, 0xf8, 0x37, 0xd1, 0xb5, 0x80, 0x55, 0xa1,
	0x2e, 0xe3, 0x8b, 0x49, 0xdd, 0xba, 0x47, 0x77, 0x6d, 0xc7, 0x76, 0x9b, 0xfa, 0x55, 0x01, 0xfc,
	0x35, 0xe9, 0xd9, 0xb5, 0x95, 0x3c, 0x41, 0xc8, 0xc7, 0xc0, 0x77, 0xd1, 0x44, 0x8b, 0x18, 0x0e,
	0x6b, 0x3d, 0x17, 0x89, 0x45, 0x17, 0x83, 0xbd, 0xc8, 0x73, 0xc3, 0x5a, 0x4c, 0x86, 0xa4, 0x0c,
	0xdf, 0x0a, 0xf2, 0xcf, 0xb2, 0xed, 0x5a, 0x32, 0x9b, 0xe9, 0xd7, 0xc4, 0xc6, 0x8c, 0x8b, 0x41,
	0x4a, 0x02, 0x32, 0xb4, 0xb8, 0x79, 0x4a, 0xdb, 0x0d, 0xde, 0x71, 0x2e, 0x59, 0x3f, 0xd2, 0xe7,
	0x63, 0xf3, 0x9b, 0x9b, 0xb5, 0x90, 0x0c, 0x49, 0x19, 0x1e, 0x16, 0xe1, 0x17, 0x02, 0xc1, 0x73,
	0xfc, 0x75, 0x35, 0x25, 0x54, 0x92, 0x4c, 0x50, 0x65, 0x71, 0x09, 0xa1, 0xf8, 0xf3, 0x02, 0xfd,
	0x86, 0xc8, 0x44, 0xe2, 0xed, 0x3a, 0xfe, 0x04, 0x01, 0x12, 0x12, 0xf8, 0x4f, 0x35, 0xb4, 0xe0,
	0x33, 0x8f, 0x18, 0x6d, 0xdb, 0x6d, 0x56, 0xa8, 0xeb, 0x12, 0x93, 0xcf, 0xdf, 0xba, 0xe5, 0x90,
	0x2d, 0xbb, 0x4d, 0x68, 0x97, 0xe9, 0xaf, 0x1d, 0xab, 0x6a, 0xbe, 0x2e, 0xdd, 0x5d, 0x68, 0x0c,
	0x45, 0x87, 0x97, 0x58, 0xc7, 0xbf, 0xaf, 0xa1, 0x6b, 0xe2, 0x02, 0x40, 0x1c, 0x26, 0x82, 0x93,
	0x60, 0x5c, 0xd1, 0x17, 0x8e, 0xe5, 0x5b, 0x14, 0x51, 0x4f, 0xf2, 0x80, 0x21, 0xdf, 0xe6, 0x80,
	0x47, 0x40, 0x78, 0x01, 0x8b, 0x3d, 0x2a, 0x8c, 0xca, 0xa3, 0x01, 0x60, 0xc8, 0xb7, 0x89, 0x3f,
	0x41, 0x3a, 0x67, 0x56, 0x89, 0xe1, 0x93, 0x10, 0xb2, 0xc1, 0xdb, 0x01, 0xcb, 0xd7, 0x6f, 0x8a,
	0x88, 0xbb, 0x29, 0xf1, 0xf5, 0x27, 0x39, 0x72, 0x90, 0x8b, 0x80, 0x3f, 0x43, 0xb3, 0xe2, 0x63,
	0x83, 0x9a, 0xed, 0xda, 0xed, 0x6e, 0x7b, 0xb5, 0xb2, 0xd4, 0x24, 0xfa, 0xd7, 0x8e, 0x35, 0xcc,
	0xa8, 0xb4, 0xae, 0x0f, 0x02, 0x42, 0xda, 0x06, 0x36, 0xd0, 0x75, 0x41, 0x5c, 0xad, 0xac, 0xd9,
	0xcd, 0xd6, 0x56, 0xcb, 0x23, 0x7e, 0x8b, 0x3a, 0x56, 0x9d, 0x78, 0x26, 0x71, 0x99, 0x5e, 0x0c,
	0x0e, 0xe2, 0x07, 0xfb, 0x85, 0xeb, 0xeb, 0xf9, 0x62, 0x30, 0x0c, 0x03, 0xff, 0x00, 0xcd, 0x4b,
	0x76, 0x95, 0x7e, 0x96, 0xb2, 0xf0, 0x75, 0x61, 0x61, 0xe1, 0x60, 0xbf, 0x30, 0xbf, 0x9e, 0x2b,
	0x05, 0x43, 0x10, 0xf8, 0xd1, 0x7c, 0xae, 0x47, 0x9d, 0x6e, 0x5b, 0xac, 0x9c, 0xbf, 0xd4, 0x6c,
	0xd6, 0x89, 0x67, 0x53, 0x4b, 0xff, 0xc6, 0xb1, 0xe6, 0x2f, 0xba, 0x1d, 0xf8, 0x28, 0x03, 0x13,
	0x32, 0x2d, 0xe1, 0xf7, 0xd0, 0x74, 0xf8, 0x32, 0xd5, 0xf4, 0x68, 0xb7, 0xe3, 0xeb, 0xdf, 0x14,
	0xf9, 0x24, 0x2a, 0xab, 0x1b, 0x0a, 0x17, 0x06, 0xa4, 0xc5, 0x81, 0xa3, 0xef, 0x33, 0xd2, 0x0e,
	0xd5, 0x5f, 0x1f, 0x38, 0x70, 0x24, 0x99, 0xa0, 0xca, 0xf2, 0x4a, 0x63, 0x8a, 0xff, 0x02, 0xa5,
	0x4c, 0xff, 0x35, 0xf5, 0xf3, 0x94, 0x4a, 0xc4, 0x81, 0x84, 0x14, 0xfe, 0x0e, 0x9a, 0x0a, 0xfe,
	0xf2, 0xeb, 0xc4, 0x7b, 0xba, 0xd9, 0xd0, 0x6f, 0x89, 0x32, 0x20, 0x9e, 0xdc, 0x2a, 0x49, 0x06,
	0xa8, 0x72, 0xe2, 0x23, 0x2c, 0x41, 0x58, 0xf6, 0xec, 0x1e, 0xf1, 0xf4, 0xdb, 0x03, 0x1f, 0x61,
	0x25, 0x78, 0xa0, 0x48, 0xe2, 0x65, 0x34, 0x63, 0x76, 0xba, 0x35, 0xc3, 0x35, 0x9a, 0xc4, 0xab,
	0x53, 0xc7, 0x36, 0xfb, 0xfa, 0xb7, 0x84, 0xb6, 0x2e, 0xb5, 0x67, 0x2a, 0xf5, 0x6d, 0x85, 0x0f,
	0x29, 0x0d, 0x91, 0x18, 0x62, 0x22, 0x2f, 0xb7, 0xae, 0x69, 0x3b, 0x44, 0xae, 0xf8, 0xaf, 0x9f,
	0x2c, 0x31, 0xc4, 0xf6, 0x07, 0x80, 0x21, 0xdf, 0x26, 0xfe, 0x3d, 0x0d, 0x4d, 0x7c, 0x4a, 0x7d,
	0x20, 0xc1, 0x45, 0xa2, 0xfe, 0x6d, 0x71, 0x92, 0xf8, 0xde, 0x88, 0x4e, 0x12, 0x4f, 0x63, 0xe4,
	0xe0, 0x08, 0x11, 0xb5, 0xdd, 0x7c, 0x71, 0x24, 0x07, 0x92, 0x0e, 0xe0, 0x9f, 0x68, 0xe8, 0xb2,
	0xfc, 0xc1, 0x05, 0xf0, 0xec, 0xe5, 0xb3, 0xb0, 0xca, 0xbc, 0x71, 0xac, 0xe9, 0x79, 0x4d, 0x5a,
	0xbc, 0x0c, 0x59, 0xa0, 0x90, 0x6d, 0x8b, 0x9f, 0x19, 0x5a, 0x86, 0xed, 0x75, 0x6c, 0x71, 0xb0,
	0xd7, 0x4b, 0xea, 0x99, 0x61, 0x2d, 0x66, 0x41, 0x52, 0x4e, 0xbc, 0x49, 0x18, 0xcf, 0xea, 0xd4,
	0xf2, 0xf5, 0xc5, 0xa0, 0x8e, 0x47, 0x6f, 0x12, 0x01, 0x19, 0x42, 0x3e, 0x17, 0xed, 0x50, 0xab,
	0xb2, 0xbe, 0x0c, 0xfa, 0x1d, 0xf5, 0x70, 0x54, 0x0f, 0xc8, 0x10, 0xf2, 0xf1, 0x7d, 0x34, 0xd9,
	0xa1, 0x56, 0xf4, 0x69, 0xae, 0x7e, 0x57, 0x5c, 0x0c, 0x8b, 0x6b, 0xf0, 0x7a, 0x82, 0x0e, 0x8a,
	0x14, 0x7e, 0x1b, 0x21, 0x8f, 0xf8, 0xd4, 0xe9, 0xf1, 0x25, 0xd1, 0xef, 0xa9, 0x3b, 0x1a, 0x04,
	0x27, 0xfa, 0x50, 0x30, 0x21, 0xc9, 0xfb, 0x11, 0xb3, 0xd3, 0xad, 0x3c, 0x6e, 0x3c, 0xed, 0x52,
	0x66, 0xe8, 0x6f, 0x8a, 0xad, 0x25, 0xfa, 0x91, 0x4a, 0x7d, 0x3b, 0x24, 0x43, 0x52, 0x06, 0xfb,
	0x68, 0x36, 0xf1, 0xa7, 0x8c, 0xe6, 0xfb, 0xc7, 0xbb, 0x38, 0xe0, 0xb9, 0x3f, 0x61, 0x48, 0x46,
	0x70, 0x1a, 0x3f, 0xb8, 0x52, 0x7e, 0xb6, 0xd9, 0x21, 0x2e, 0x3f, 0x65, 0xf9, 0xfa, 0x5b, 0x62,
	0x56, 0x12, 0x57, 0xca, 0x31, 0x0f, 0x14, 0x49, 0xbe, 0xb8, 0x66, 0xd0, 0x07, 0x6e, 0xf5, 0x3b,
	0x44, 0x7f, 0x5b, 0x5d, 0xdc, 0x4a, 0xcc, 0x82, 0xa4, 0x1c, 0x6f, 0x9c, 0x78, 0xe2, 0x5b, 0xaa,
	0xaf, 0xf3, 0x5e, 0xfa, 0x3b, 0x62, 0x7d, 0x45, 0xe3, 0xb4, 0x11, 0x51, 0x21, 0x21, 0xc1, 0x1d,
	0x94, 0x7f, 0x05, 0x5d, 0xf4, 0x03, 0xf5, 0xc4, 0xba, 0x91, 0xe0, 0x81, 0x22, 0x89, 0xd7, 0xd1,
	0x25, 0x9f, 0x78, 0xb6, 0xe1, 0xd8, 0xcf, 0x89, 0x28, 0x2b, 0xfc, 0x3c, 0xe0, 0xeb, 0x0f, 0xc5,
	0x52, 0x5c, 0x3d, 0xd8, 0x2f, 0x5c, 0x6a, 0xa4, 0xd9, 0x90, 0xa5, 0x83, 0xff, 0x40, 0x43, 0x93,
	0xa4, 0x67, 0x8b, 0xa6, 0x69, 0xcd, 0xf0, 0x2c, 0xfd, 0x1d, 0xb1, 0xc1, 0xbf, 0x3f, 0xa2, 0x0d,
	0xbe, 0x92, 0x80, 0x0e, 0x76, 0x78, 0x34, 0xbe, 0x24, 0x0b, 0x14, 0x1f, 0x14, 0xa7, 0x1a, 0x74,
	0x97, 0xe9, 0xef, 0xfe, 0x52, 0x9c, 0xe2, 0xd0, 0x39, 0x4e, 0x71, 0x16, 0x28, 0x3e, 0xe0, 0xbf,
	0xd2, 0xd0, 0xd5, 0x24, 0x61, 0xd5, 0x33, 0xcc, 0x30, 0x33, 0x7f, 0x57, 0xf8, 0x67, 0xfe, 0x12,
	0xfc, 0x4b, 0x58, 0x09, 0x5c, 0x8d, 0x9e, 0x0d, 0x72, 0xa4, 0x20, 0xcf, 0x49, 0xfc, 0xe7, 0x1a,
	0xba, 0x19, 0xf2, 0xea, 0xfc, 0x68, 0xd1, 0xf5, 0x48, 0xfc, 0xb6, 0x2a, 0x47, 0xf2, 0xe8, 0x58,
	0xbb, 0xf2, 0x96, 0x74, 0xea, 0xe6, 0xca, 0x4b, 0xf0, 0xe1, 0xa5, 0x1e, 0x88, 0xf3, 0x9c, 0x94,
	0x09, 0x92, 0x62, 0x72, 0xa2, 0xdf, 0x13, 0x7b, 0x24, 0x3e, 0xcf, 0xe5, 0x09, 0x42, 0x3e, 0x06,
	0xfe, 0x4b, 0x0d, 0x5d, 0x89, 0xb8, 0x41, 0xb7, 0x08, 0xc4, 0x74, 0x0c, 0xbb, 0xad, 0xbf, 0x2f,
	0xd6, 0x71, 0x67, 0xc4, 0xeb, 0xa8, 0x1a, 0x09, 0x96, 0x71, 0x41, 0x0e, 0xe1, 0x4a, 0xb6, 0x10,
	0xe4, 0x78, 0xc8, 0x73, 0x53, 0x87, 0x5a, 0xbc, 0x5f, 0xa9, 0x50, 0x8f, 0xe8, 0x1f, 0x04, 0x97,
	0x05, 0x61, 0x6e, 0xaa, 0xc7, 0x2c, 0x48, 0xca, 0x61, 0x0b, 0xdd, 0x88, 0x0f, 0xb8, 0xc1, 0xc7,
	0xa4, 0x4b, 0x8c, 0x19, 0x66, 0x6b, 0x99, 0xf0, 0x7f, 0xf5, 0x25, 0x91, 0x3a, 0x6e, 0x1e, 0xec,
	0x17, 0x6e, 0xac, 0x0c, 0x91, 0x83, 0xa1, 0x28, 0xb8, 0x81, 0x2e, 0x77, 0x3c, 0xca, 0x88, 0xc9,
	0x36, 0x88, 0xe7, 0x12, 0x67, 0x99, 0xec, 0x1a, 0x5d, 0x87, 0xf9, 0x7a, 0x59, 0xc0, 0x47, 0xa5,
	0xb6, 0x9e, 0x25, 0x04, 0xd9, 0xba, 0x18, 0xd0, 0x95, 0xb6, 0xb1, 0x47, 0xd6, 0xeb, 0x5b, 0xdc,
	0xb2, 0xbf, 0xcd, 0x6c, 0xa7, 0xd2, 0x32, 0x6c, 0xd7, 0xd7, 0x2b, 0xc1, 0xd5, 0x12, 0x9f, 0xc5,
	0x5a, 0xa6, 0x04, 0xe4, 0x68, 0xe2, 0x4d, 0x74, 0xd9, 0xee, 0x30, 0x41, 0xad, 0x19, 0xfe, 0xa7,
	0x5d, 0xe2, 0x19, 0x16, 0x29, 0xdb, 0x4c, 0x5f, 0x0e, 0x5e, 0xfa, 0xb8, 0x93, 0xa1, 0x9a, 0x22,
	0x00, 0xd9, 0x7a, 0xf8, 0x11, 0xba, 0x18, 0x32, 0x96, 0x3d, 0xda, 0xe1, 0x50, 0x2b, 0xf1, 0x3d,
	0x4e, 0x08, 0x25, 0x59, 0x30, 0x28, 0x2b, 0x12, 0xde, 0x2e, 0x31, 0x58, 0xd7, 0x23, 0xab, 0xe2,
	0x06, 0xee, 0xf1, 0x48, 0x13, 0xde, 0xe3, 0x04, 0xf4, 0x40, 0xc2, 0x4b, 0xb2, 0x40, 0xf1, 0x81,
	0xd7, 0xb3, 0x5d, 0xc3, 0x76, 0x1a, 0x9f, 0x19, 0x9d, 0x4d, 0x57, 0x5f, 0x0d, 0xde, 0xca, 0x79,
	0x3d, 0x7b, 0x1c, 0x51, 0x21, 0x21, 0x21, 0x7e, 0x87, 0x10, 0xfe, 0xb0, 0xa8, 0x4a, 0x9b, 0x35,
	0xe3, 0x99, 0xf8, 0xf1, 0xcd, 0xda, 0xc0, 0xef, 0x10, 0xd2, 0x22, 0x90, 0xa5, 0x87, 0xab, 0x68,
	0x6e, 0x80, 0x1c, 0xd4, 0xf1, 0x75, 0x31, 0xaf, 0x3a, 0x3f, 0xc3, 0x54, 0x32, 0xf8, 0x90, 0xa9,
	0x85, 0x5f, 0x68, 0xe8, 0x76, 0x30, 0x59, 0x35, 0xa3, 0xb3, 0xe4, 0x5a, 0xc1, 0x87, 0xf7, 0x95,
	0x96, 0xe1, 0x36, 0xc9, 0x32, 0x61, 0xc1, 0xad, 0x41, 0x83, 0x79, 0x06, 0x23, 0xcd, 0xbe, 0xfe,
	0xa1, 0xf0, 0xd9, 0x93, 0x3e, 0xdf, 0xae, 0x1c, 0x56, 0xf1, 0xcb, 0xfd, 0xc2, 0xa3, 0xe1, 0x6f,
	0x43, 0x20, 0x7f, 0x66, 0x94, 0x03, 0x00, 0x87, 0x77, 0x12, 0xff, 0xb1, 0x86, 0xa6, 0x83, 0xb3,
	0x52, 0xd4, 0x9d, 0x6f, 0x88, 0xb0, 0xf9, 0x78, 0x54, 0xf7, 0xfc, 0x0a, 0x78, 0x10, 0x38, 0x51,
	0x87, 0xa8, 0x32, 0x61, 0xc0, 0x13, 0x11, 0xd1, 0x7c, 0x0a, 0x22, 0xd7, 0xaa, 0x23, 0x8d, 0xe8,
	0x8d, 0x04, 0xf4, 0x40, 0x44, 0x27, 0x59, 0xa0, 0xf8, 0x80, 0xeb, 0x68, 0x4e, 0x75, 0x33, 0x38,
	0xd0, 0xe9, 0x35, 0xb1, 0xdc, 0xd1, 0xd1, 0xb8, 0x91, 0x21, 0x03, 0x99, 0x9a, 0xf8, 0x43, 0x84,
	0x93, 0x16, 0x24, 0xde, 0x13, 0xf5, 0xa2, 0x6f, 0x23, 0x25, 0x01, 0x19, 0x5a, 0x3c, 0xd1, 0x11,
	0x77, 0x97, 0x7a, 0x26, 0x79, 0x42, 0x2d, 0xb2, 0xe4, 0x38, 0xd4, 0x34, 0x44, 0x9a, 0xd0, 0x37,
	0xc5, 0x25, 0x9c, 0x48, 0x74, 0x2b, 0x99, 0x12, 0x90, 0xa3, 0x39, 0xbf, 0x82, 0xae, 0xe6, 0xbc,
	0xd6, 0x1c, 0xe5, 0x47, 0x1b, 0xf3, 0xef, 0xa1, 0x99, 0xc1, 0xa3, 0xda, 0x91, 0xf4, 0xdf, 0x47,
	0xb3, 0xa9, 0x4e, 0xf0, 0xb8, 0x00, 0x51, 0xd7, 0x76, 0x24, 0x80, 0x0f, 0xd1, 0x8d, 0x61, 0x6d,
	0xd5, 0x91, 0xb0, 0xd6, 0xd1, 0xf5, 0x21, 0xa5, 0xfd, 0xa8, 0xe3, 0x4a, 0x25, 0xe7, 0x97, 0x01,
	0x9c, 0x4f, 0x02, 0x2c, 0xa1, 0x4b, 0x19, 0xdb, 0xf4, 0xa8, 0x3e, 0xa4, 0xb6, 0xd3, 0x91, 0x7e,
	0xd2, 0xf3, 0x33, 0x0d, 0xdd, 0x18, 0xf6, 0xe0, 0x7f, 0xc8, 0x6f, 0x1b, 0xf0, 0x27, 0xe8, 0xbc,
	0x69, 0x98, 0x2d, 0xb2, 0xb5, 0x55, 0x3d, 0xe6, 0xb3, 0x72, 0xf4, 0xb1, 0x5d, 0x45, 0xe2, 0x40,
	0x84, 0x58, 0xfc, 0x93, 0x31, 0x74, 0x7d, 0xc8, 0x4b, 0x3a, 0x7e, 0x8e, 0xb0, 0x90, 0x0d, 0xa9,
	0xc4, 0xe2, 0x7e, 0x68, 0x27, 0x7b, 0xf0, 0xad, 0xa4, 0x10, 0x21, 0xc3, 0x8a, 0xb8, 0xe4, 0x13,
	0xe4, 0x6d, 0xd7, 0x50, 0xcc, 0x8f, 0x9d, 0xec, 0x92, 0xaf, 0x92, 0x81, 0x09, 0x99, 0x96, 0x8a,
	0xdb, 0xe8, 0x5a, 0xee, 0x37, 0x21, 0xc1, 0x8f, 0x13, 0x6d, 0xe2, 0xb2, 0xca, 0x92, 0x78, 0xe6,
	0x4c, 0xfd, 0x38, 0x31, 0xe6, 0x81, 0x22, 0x59, 0xbe, 0xf5, 0xf9, 0x17, 0x0b, 0xa7, 0x5e, 0x7c,
	0xb1, 0x70, 0xea, 0xe7, 0x5f, 0x2c, 0x9c, 0xfa, 0xf1, 0xc1, 0x82, 0xf6, 0xf9, 0xc1, 0x82, 0xf6,
	0xe2, 0x60, 0x41, 0xfb, 0xf9, 0xc1, 0x82, 0xf6, 0xaf, 0x07, 0x0b, 0xda, 0x4f, 0xff, 0x6d, 0xe1,
	0xd4, 0xc7, 0x63, 0xbd, 0xbb, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x6a, 0x0d, 0xf3, 0x92,
	0x44, 0x00, 0x00,
}
